"""Common utility handlers and helpers.

This module contains utilities shared across different handler modules,
including database transaction helpers and callback query routing.
"""

from __future__ import annotations

import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    PollAnswerHandler,
    filters,
)
from sqlalchemy.exc import SQLAlchemyError

from diabetes.db import Entry, SessionLocal
from diabetes.ui import menu_keyboard

logger = logging.getLogger(__name__)


def commit_session(session) -> bool:
    """Commit an SQLAlchemy session.

    Parameters
    ----------
    session: Session
        Active SQLAlchemy session.

    Returns
    -------
    bool
        ``True`` if the commit succeeded. If an error occurs the session is
        rolled back, the error is logged and ``False`` is returned.
    """
    try:
        session.commit()
        return True
    except SQLAlchemyError as exc:  # pragma: no cover - logging only
        session.rollback()
        logger.error("DB commit failed: %s", exc)
        return False


from .onboarding_handlers import (  # noqa: E402
    start_command,
    onboarding_conv,
    onboarding_poll_answer,
)


async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle inline button callbacks for pending entries and history actions."""
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "confirm_entry":
        entry_data = context.user_data.pop("pending_entry", None)
        if not entry_data:
            await query.edit_message_text("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        with SessionLocal() as session:
            entry = Entry(**entry_data)
            session.add(entry)
            if not commit_session(session):
                await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.")
                return
        await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!")
        return
    elif data == "edit_entry":
        entry_data = context.user_data.get("pending_entry")
        if not entry_data:
            await query.edit_message_text("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        context.user_data["edit_id"] = None
        await query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`—Å–∞—Ö–∞—Ä=<–º–º–æ–ª—å/–ª>  xe=<–•–ï>  carbs=<–≥>  dose=<–µ–¥>`\n"
            "–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –≤—Å–µ –ø–æ–ª—è (—á—Ç–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ ‚Äî —Ç–æ –∏ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è).",
            parse_mode="Markdown",
        )
        return
    elif data == "cancel_entry":
        context.user_data.pop("pending_entry", None)
        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await query.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)
        return
    elif data.startswith("edit:") or data.startswith("del:"):
        action, entry_id = data.split(":", 1)
        try:
            entry_id = int(entry_id)
        except ValueError:
            logger.warning("Invalid entry_id in callback data: %s", entry_id)
            await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.")
            return
        with SessionLocal() as session:
            entry = session.get(Entry, entry_id)
            if not entry:
                await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—É–∂–µ —É–¥–∞–ª–µ–Ω–∞).")
                return
            if entry.telegram_id != update.effective_user.id:
                await query.edit_message_text(
                    "‚ö†Ô∏è –≠—Ç–∞ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                )
                return
            if action == "del":
                session.delete(entry)
                if not commit_session(session):
                    await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å.")
                    return
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
                return
            if action == "edit":
                context.user_data["edit_entry"] = {
                    "id": entry.id,
                    "chat_id": query.message.chat_id,
                    "message_id": query.message.message_id,
                }
                keyboard = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                "—Å–∞—Ö–∞—Ä", callback_data=f"edit_field:{entry.id}:sugar"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                "xe", callback_data=f"edit_field:{entry.id}:xe"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                "dose", callback_data=f"edit_field:{entry.id}:dose"
                            )
                        ],
                    ]
                )
                await query.edit_message_reply_markup(reply_markup=keyboard)
                return
    elif data.startswith("edit_field:"):
        try:
            _, entry_id_str, field = data.split(":")
            entry_id = int(entry_id_str)
        except ValueError:
            logger.warning("Invalid edit_field data: %s", data)
            await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        context.user_data["edit_id"] = entry_id
        context.user_data["edit_field"] = field
        context.user_data["edit_query"] = query
        prompt = {
            "sugar": "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª).",
            "xe": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –•–ï.",
            "dose": "–í–≤–µ–¥–∏—Ç–µ –¥–æ–∑—É –∏–Ω—Å—É–ª–∏–Ω–∞ (–µ–¥.).",
        }.get(field, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        await query.message.reply_text(prompt, reply_markup=ForceReply(selective=True))
        return
    else:
        logger.warning("Unrecognized callback data: %s", data)
        await query.edit_message_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Display the main menu keyboard using ``menu_keyboard``."""
    await update.message.reply_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show available commands, including :command:`/menu`, and menu buttons."""

    text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–Ω–æ–ø–∫–∞–º)\n"
        "/profile - –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/report - –æ—Ç—á—ë—Ç\n"
        "/sugar - —Ä–∞—Å—á—ë—Ç —Å–∞—Ö–∞—Ä–∞\n"
        "/gpt - —á–∞—Ç —Å GPT\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ ‚ú® –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ\n"
        "‚Ä¢ üïπ –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ (smart-input)\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n\n"
        "üì≤ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n"
        "üïπ –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥\n"
        "üì∑ –§–æ—Ç–æ –µ–¥—ã\n"
        "ü©∏ –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞\n"
        "üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞\n"
        "üìä –ò—Å—Ç–æ—Ä–∏—è\n"
        "üìà –û—Ç—á—ë—Ç\n"
        "üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
    )
    await update.message.reply_text(text, reply_markup=menu_keyboard)


async def smart_input_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Explain the smart-input syntax for quick diary entries."""

    text = (
        "üïπ –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å —Å–∞—Ö–∞—Ä, –•–ï –∏ –¥–æ–∑—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `—Å–∞—Ö–∞—Ä=<–º–º–æ–ª—å/–ª> xe=<–•–ï> dose=<–µ–¥>` –∏–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç,\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: `5 –º–º–æ–ª—å/–ª 3—Ö–µ 2–µ–¥`. –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."
    )
    await update.message.reply_text(text, parse_mode="Markdown")


def register_handlers(app: Application) -> None:
    """Register bot handlers on the provided ``Application`` instance.

    Parameters
    ----------
    app: :class:`telegram.ext.Application`
        The application to which handlers will be attached.
    """

    # Import inside the function to avoid heavy imports at module import time
    # (for example OpenAI client initialization).
    from . import dose_handlers, profile_handlers, reporting_handlers

    app.add_handler(onboarding_conv)
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CommandHandler("report", reporting_handlers.report_request))
    app.add_handler(dose_handlers.dose_conv)
    app.add_handler(dose_handlers.sugar_conv)
    app.add_handler(profile_handlers.profile_conv)
    app.add_handler(CommandHandler("sugar", dose_handlers.sugar_start))
    app.add_handler(CommandHandler("cancel", dose_handlers.dose_cancel))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("gpt", dose_handlers.chat_with_gpt))
    app.add_handler(PollAnswerHandler(onboarding_poll_answer))
    app.add_handler(
        MessageHandler(filters.Regex("^üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$"), profile_handlers.profile_view)
    )
    app.add_handler(
        MessageHandler(filters.Regex("^üìà –û—Ç—á—ë—Ç$"), reporting_handlers.report_request)
    )
    app.add_handler(
        MessageHandler(filters.Regex("^üìä –ò—Å—Ç–æ—Ä–∏—è$"), reporting_handlers.history_view)
    )
    app.add_handler(
        MessageHandler(filters.Regex("^üì∑ –§–æ—Ç–æ –µ–¥—ã$"), dose_handlers.photo_prompt)
    )
    app.add_handler(
        MessageHandler(filters.Regex("^üïπ –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥$"), smart_input_help)
    )
    app.add_handler(
        MessageHandler(filters.Regex("^‚ÑπÔ∏è –ü–æ–º–æ—â—å$"), help_command)
    )
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, dose_handlers.freeform_handler)
    )
    app.add_handler(MessageHandler(filters.PHOTO, dose_handlers.photo_handler))
    app.add_handler(
        MessageHandler(filters.Document.IMAGE, dose_handlers.doc_handler)
    )
    app.add_handler(
        CallbackQueryHandler(
            reporting_handlers.report_period_callback, pattern="^report_back$"
        )
    )
    app.add_handler(
        CallbackQueryHandler(
            reporting_handlers.report_period_callback, pattern="^report_period:"
        )
    )
    app.add_handler(
        CallbackQueryHandler(profile_handlers.profile_back, pattern="^profile_back$")
    )
    app.add_handler(CallbackQueryHandler(callback_router))


__all__ = [
    "commit_session",
    "callback_router",
    "menu_keyboard",
    "start_command",
    "menu_command",
    "help_command",
    "smart_input_help",
    "register_handlers",
]
