"""Handlers related to patient profile management."""

from __future__ import annotations

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from diabetes.db import SessionLocal, Profile
from diabetes.ui import menu_keyboard
from .common_handlers import commit_session


PROFILE_ICR, PROFILE_CF, PROFILE_TARGET = range(3)


async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Set patient profile coefficients via ``/profile`` command."""
    args = context.args
    if len(args) != 3:
        await update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/profile <–ò–ö–• –≥/–µ–¥.> <–ö–ß –º–º–æ–ª—å/–ª> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 10 2 6",
            parse_mode="Markdown",
        )
        return

    try:
        icr = float(args[0].replace(",", "."))
        cf = float(args[1].replace(",", "."))
        target = float(args[2].replace(",", "."))
    except ValueError:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä:\n/profile 10 2 6",
            parse_mode="Markdown",
        )
        return

    if icr <= 0 or cf <= 0 or target <= 0:
        await update.message.reply_text(
            "‚ùó –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü—Ä–∏–º–µ—Ä:\n/profile 10 2 6",
            parse_mode="Markdown",
        )
        return

    warning_msg = ""
    if icr > 8 or cf < 3:
        warning_msg = (
            "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–µ—Å—Ç–∞–º–∏ –ò–ö–• –∏ –ö–ß.\n"
            f"‚Ä¢ –í—ã –≤–≤–µ–ª–∏ –ò–ö–• = {icr} –≥/–µ–¥. (–≤—ã—Å–æ–∫–æ–≤–∞—Ç–æ)\n"
            f"‚Ä¢ –ö–ß = {cf} –º–º–æ–ª—å/–ª (–Ω–∏–∑–∫–æ–≤–∞—Ç–æ)\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            f"/profile {cf} {icr} {target}\n"
        )

    user_id = update.effective_user.id
    with SessionLocal() as session:
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)

        prof.icr = icr
        prof.cf = cf
        prof.target_bg = target
        if not commit_session(session):
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
            return

    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        f"‚Ä¢ –ò–ö–•: {icr} –≥/–µ–¥.\n"
        f"‚Ä¢ –ö–ß: {cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª" + warning_msg,
        parse_mode="Markdown",
    )


async def profile_view(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Display current patient profile."""
    user_id = update.effective_user.id
    with SessionLocal() as session:
        profile = session.get(Profile, user_id)

    if not profile:
        await update.message.reply_text(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/profile <–ò–ö–• –≥/–µ–¥.> <–ö–ß –º–º–æ–ª—å/–ª> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 10 2 6",
            parse_mode="Markdown",
        )
        return

    msg = (
        "üìÑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –ò–ö–•: {profile.icr} –≥/–µ–¥.\n"  # –ò–Ω—Å—É–ª–∏–Ω-–∫–∞—Ä–± –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        f"‚Ä¢ –ö–ß: {profile.cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {profile.target_bg} –º–º–æ–ª—å/–ª"
    )
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="profile_edit")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_back")],
        ]
    )
    await update.message.reply_text(msg, reply_markup=keyboard)


async def profile_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel profile creation conversation."""
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END


async def profile_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Return to main menu from profile view."""
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    await query.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)


async def profile_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start step-by-step profile setup."""
    query = update.callback_query
    await query.answer()
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ò–ö–• (–≥/–µ–¥.):")
    return PROFILE_ICR


async def profile_icr(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle ICR input."""
    text = update.message.text.strip().replace(",", ".")
    try:
        icr = float(text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ò–ö–• —á–∏—Å–ª–æ–º.")
        return PROFILE_ICR
    if icr <= 0:
        await update.message.reply_text("–ò–ö–• –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return PROFILE_ICR
    context.user_data["profile_icr"] = icr
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ö–ß) –º–º–æ–ª—å/–ª.")
    return PROFILE_CF


async def profile_cf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle CF input."""
    text = update.message.text.strip().replace(",", ".")
    try:
        cf = float(text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ö–ß —á–∏—Å–ª–æ–º.")
        return PROFILE_CF
    if cf <= 0:
        await update.message.reply_text("–ö–ß –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return PROFILE_CF
    context.user_data["profile_cf"] = cf
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª).")
    return PROFILE_TARGET


async def profile_target(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle target BG input and save profile."""
    text = update.message.text.strip().replace(",", ".")
    try:
        target = float(text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä —á–∏—Å–ª–æ–º.")
        return PROFILE_TARGET
    if target <= 0:
        await update.message.reply_text("–¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return PROFILE_TARGET
    icr = context.user_data.pop("profile_icr")
    cf = context.user_data.pop("profile_cf")
    user_id = update.effective_user.id
    with SessionLocal() as session:
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)
        prof.icr = icr
        prof.cf = cf
        prof.target_bg = target
        if not commit_session(session):
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
            return ConversationHandler.END
    await update.message.reply_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        f"‚Ä¢ –ò–ö–•: {icr} –≥/–µ–¥.\n"
        f"‚Ä¢ –ö–ß: {cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª",
        reply_markup=menu_keyboard,
    )
    return ConversationHandler.END


profile_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(profile_edit, pattern="^profile_edit$")],
    states={
        PROFILE_ICR: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_icr)],
        PROFILE_CF: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_cf)],
        PROFILE_TARGET: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, profile_target)
        ],
    },
    fallbacks=[CommandHandler("cancel", profile_cancel)],
)


__all__ = [
    "profile_command",
    "profile_view",
    "profile_cancel",
    "profile_back",
    "profile_edit",
    "profile_conv",
]
