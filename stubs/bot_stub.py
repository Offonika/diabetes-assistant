import re

PHOTO_SUGAR = 7
WAITING_GPT_FLAG = "waiting_gpt_response"

def extract_nutrition_info(text: str):
    carbs = xe = None
    m = re.search(r"—É–≥–ª–µ–≤–æ–¥[^\d]*:\s*([\d.,]+)\s*–≥", text, re.IGNORECASE)
    if m:
        carbs = float(m.group(1).replace(",", "."))

    m = re.search(r"\b—Ö[–µe][^\d]*:\s*([\d.,]+)", text, re.IGNORECASE)
    if m:
        xe = float(m.group(1).replace(",", "."))

    if carbs is None:
        rng = re.search(r"(\d+[.,]?\d*)\s*[‚Äì-]\s*(\d+[.,]?\d*)\s*–≥", text, re.IGNORECASE)
        if rng:
            carbs = (float(rng.group(1).replace(",", ".")) + float(rng.group(2).replace(",", "."))) / 2

    if xe is None:
        rng = re.search(r"(\d+[.,]?\d*)\s*[‚Äì-]\s*(\d+[.,]?\d*)\s*(?:–•–ï|XE)", text, re.IGNORECASE)
        if rng:
            xe = (float(rng.group(1).replace(",", ".")) + float(rng.group(2).replace(",", "."))) / 2

    return carbs, xe

async def photo_handler(update, context, demo: bool = False):
    # simplified mock flow
    context.user_data[WAITING_GPT_FLAG] = True
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ (—ç—Ç–æ –∑–∞–π–º—ë—Ç 5‚Äë10‚ÄØ—Å)‚Ä¶")
    await update.message.reply_text("üçΩÔ∏è –ù–∞ —Ñ–æ—Ç–æ:\n–£–≥–ª–µ–≤–æ–¥—ã: 10 –≥\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å–∞—Ö–∞—Ä (–º–º–æ–ª—å/–ª) ‚Äî –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –¥–æ–∑—É –∏–Ω—Å—É–ª–∏–Ω–∞.")
    context.user_data.pop(WAITING_GPT_FLAG, None)
    return PHOTO_SUGAR

