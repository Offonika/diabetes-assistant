# bot.py
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from db import SessionLocal, init_db, User, Profile, Entry
from gpt_client import create_thread, send_message, client
from functions import PatientProfile, calc_bolus
from config import TELEGRAM_TOKEN, OPENAI_ASSISTANT_ID

init_db()

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üì∑ –§–æ—Ç–æ –µ–¥—ã"), KeyboardButton("üçΩÔ∏è –£–≥–ª–µ–≤–æ–¥—ã –∏ —Å–∞—Ö–∞—Ä")],
        [KeyboardButton("üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞"), KeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üîÅ –°–±—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    user = session.get(User, user_id)
    if not user:
        thread_id = create_thread()
        user = User(telegram_id=user_id, thread_id=thread_id)
        session.add(user)
        session.commit()
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.", reply_markup=menu_keyboard)
    else:
        await update.message.reply_text("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=menu_keyboard)
    session.close()

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)

async def profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /profile <–ò–ö–•> <–ö–ß> <—Ü–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä>")

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    os.makedirs('photos', exist_ok=True)
    path = f"photos/{user_id}_{photo.file_unique_id}.jpg"
    await file.download_to_drive(path)

    session = SessionLocal()
    user = session.get(User, user_id)

    run = send_message(user.thread_id, image_path=path)
    await update.message.reply_text("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")

    while run.status in ["queued", "in_progress"]:
        run = client.beta.threads.runs.retrieve(thread_id=user.thread_id, run_id=run.id)
        await asyncio.sleep(2)

    messages = client.beta.threads.messages.list(thread_id=user.thread_id)
    response_text = messages.data[0].content[0].text.value

    entry = Entry(telegram_id=user_id, photo_path=path, gpt_summary=response_text)
    session.add(entry)
    session.commit()
    session.close()

    await update.message.reply_text(f"–û—Ç–≤–µ—Ç GPT: {response_text}")

async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    entries = session.query(Entry).filter_by(telegram_id=user_id).order_by(Entry.timestamp.desc()).limit(5).all()
    session.close()

    if not entries:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
    for e in entries:
        row = f"\n{e.timestamp.strftime('%d.%m %H:%M')} ‚Äî –°–∞—Ö–∞—Ä: {e.sugar_before or '-'} –º–º–æ–ª—å/–ª, –£–≥–ª–µ–≤–æ–¥—ã: {e.carbs_g or '-'} –≥, –î–æ–∑–∞: {e.dose or '-'} –ï–¥"
        text += row

    await update.message.reply_text(text)

async def chat_with_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì∑ –§–æ—Ç–æ –µ–¥—ã":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã.")
    elif text == "üçΩÔ∏è –£–≥–ª–µ–≤–æ–¥—ã –∏ —Å–∞—Ö–∞—Ä":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /dose <—Å–∞—Ö–∞—Ä> <—É–≥–ª–µ–≤–æ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö>")
    elif text == "üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /dose <—Å–∞—Ö–∞—Ä> <—É–≥–ª–µ–≤–æ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö>")
    elif text == "üìä –ò—Å—Ç–æ—Ä–∏—è":
        await history_handler(update, context)
    elif text == "‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å":
        await profile_handler(update, context)
    elif text == "üîÅ –°–±—Ä–æ—Å":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    else:
        session = SessionLocal()
        user_id = update.effective_user.id
        user = session.get(User, user_id)
        session.close()

        if not user:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            return

        run = send_message(user.thread_id, content=text)
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞...")

        while run.status in ["queued", "in_progress"]:
            run = client.beta.threads.runs.retrieve(thread_id=user.thread_id, run_id=run.id)
            await asyncio.sleep(2)

        messages = client.beta.threads.messages.list(thread_id=user.thread_id)
        response = messages.data[0].content[0].text.value

        await update.message.reply_text(response)

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_gpt))
    app.run_polling()

if __name__ == "__main__":
    main()

