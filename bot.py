# bot.py
import os
import re
import asyncio
import time
import logging
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from db import SessionLocal, init_db, User, Profile, Entry
from gpt_client import create_thread, send_message, client
from functions import PatientProfile, calc_bolus
from config import TELEGRAM_TOKEN

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–æ–∑—ã
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–æ–∑—ã
PROFILE_ICR, PROFILE_CF, PROFILE_TARGET         = range(0, 3)    # 0,1,2
DOSE_METHOD, DOSE_XE, DOSE_SUGAR, DOSE_CARBS    = range(3, 7)    # 3,4,5,6
PHOTO_SUGAR                                     = 7              # –ø–æ—Å–ª–µ DOSE_CARBS
SUGAR_VAL                                       = 8              # –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è /sugar
# (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∑—ã –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏  –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å 9 –∏ 10)

WAITING_GPT_FLAG = "waiting_gpt_response"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞
dose_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üì∑ –§–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏")],
        [KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)")],
        [KeyboardButton("üî¢ –í–≤–µ—Å—Ç–∏ –•–ï")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True
)

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üì∑ –§–æ—Ç–æ –µ–¥—ã")], 
        [KeyboardButton("üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞"), KeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("üîÅ –°–±—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤) –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞:
logging.basicConfig(filename='gpt_responses.log', level=logging.INFO, format='%(asctime)s %(message)s')

def extract_nutrition_info(text: str):
    """
    –ò—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ:
      ‚Ä¢ ¬´–£–≥–ª–µ–≤–æ–¥—ã: 37 –≥ ¬± 3 –≥¬ª  ‚Üí carbs = 37
      ‚Ä¢ ¬´–•–ï: 3,1 ¬± 0,2¬ª         ‚Üí xe    = 3.1
      ‚Ä¢ –¥–∏–∞–ø–∞–∑–æ–Ω ¬´20‚Äì25 –≥¬ª      ‚Üí carbs = —Å—Ä–µ–¥–Ω–µ–µ
      ‚Ä¢ –¥–∏–∞–ø–∞–∑–æ–Ω ¬´3‚Äì4 –•–ï¬ª       ‚Üí xe    = —Å—Ä–µ–¥–Ω–µ–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (carbs_g, xe)
    """
    carbs = xe = None
    # --- –Ω–æ–≤—ã–π —Å—Ç—Ä–æ–≥–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–æ –∑–Ω–∞–∫–æ–º ¬± ---
    m = re.search(r"—É–≥–ª–µ–≤–æ–¥[^\d]*:\s*([\d.,]+)\s*–≥", text, re.IGNORECASE)
    if m:
        carbs = float(m.group(1).replace(",", "."))

    m = re.search(r"\b—Ö[–µe][^\d]*:\s*([\d.,]+)", text, re.IGNORECASE)
    if m:
        xe = float(m.group(1).replace(",", "."))

    # --- –¥–∏–∞–ø–∞–∑–æ–Ω—ã ¬´20‚Äì25 –≥¬ª / ¬´3‚Äì4 –•–ï¬ª ---
    if carbs is None:
        rng = re.search(r"(\d+[.,]?\d*)\s*[‚Äì-]\s*(\d+[.,]?\d*)\s*–≥", text, re.IGNORECASE)
        if rng:
            carbs = (float(rng.group(1).replace(",", ".")) +
                     float(rng.group(2).replace(",", "."))) / 2

    if xe is None:
        rng = re.search(r"(\d+[.,]?\d*)\s*[‚Äì-]\s*(\d+[.,]?\d*)\s*(?:–•–ï|XE)", text, re.IGNORECASE)
        if rng:
            xe = (float(rng.group(1).replace(",", ".")) +
                  float(rng.group(2).replace(",", "."))) / 2

    return carbs, xe

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    user = session.get(User, user_id)
    if not user:
        thread_id = create_thread()
        user = User(telegram_id=user_id, thread_id=thread_id)
        session.add(user)
        session.commit()
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.", reply_markup=menu_keyboard)
    else:
        await update.message.reply_text("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=menu_keyboard)
    session.close()

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)

async def reset_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    session.query(Entry).filter_by(telegram_id=user_id).delete()
    session.query(Profile).filter_by(telegram_id=user_id).delete()
    session.commit()
    session.close()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=menu_keyboard)

# === –ü—Ä–æ—Ñ–∏–ª—å ===
async def profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    profile = session.get(Profile, user_id)
    session.close()
    
    current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.icr} –≥/–µ–¥.)" if profile and profile.icr else ""
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –ò–ö–• (—Å–∫–æ–ª—å–∫–æ –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ 1 –µ–¥. –∏–Ω—Å—É–ª–∏–Ω–∞) {current_value}:"
    )
    return PROFILE_ICR

async def profile_icr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['icr'] = float(update.message.text)
        
        session = SessionLocal()
        profile = session.get(Profile, update.effective_user.id)
        session.close()

        current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.cf} –º–º–æ–ª—å/–ª)" if profile and profile.cf else ""
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–ö–ß) {current_value}:"
        )
        return PROFILE_CF
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_ICR

async def profile_cf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['cf'] = float(update.message.text)

        session = SessionLocal()
        profile = session.get(Profile, update.effective_user.id)
        session.close()

        current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.target_bg} –º–º–æ–ª—å/–ª)" if profile and profile.target_bg else ""
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ {current_value}:"
        )
        return PROFILE_TARGET
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_CF

async def profile_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['target'] = float(update.message.text)
        session = SessionLocal()
        user_id = update.effective_user.id
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)
        prof.icr = context.user_data['icr']
        prof.cf = context.user_data['cf']
        prof.target_bg = context.user_data['target']
        session.commit()
        session.close()
        await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=menu_keyboard)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_TARGET
    
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 3:
        await update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/profile <–ò–ö–•> <–ö–ß> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 2 10 6",
            parse_mode="Markdown"
        )
        return

    try:
        icr = float(args[0])
        cf = float(args[1])
        target = float(args[2])

        # –§–ª–∞–≥–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è
        suspicious = False
        warning_msg = ""

        if icr > 8 or cf < 3:
            suspicious = True
            warning_msg = (
                "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–µ—Å—Ç–∞–º–∏ –ò–ö–• –∏ –ö–ß.\n"
                f"‚Ä¢ –í—ã –≤–≤–µ–ª–∏ –ò–ö–• = {icr} –º–º–æ–ª—å/–ª (–≤—ã—Å–æ–∫–æ–≤–∞—Ç–æ)\n"
                f"‚Ä¢ –ö–ß = {cf} –≥/–µ–¥. (–Ω–∏–∑–∫–æ–≤–∞—Ç–æ)\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                f"/profile {cf} {icr} {target}\n"
            )

        session = SessionLocal()
        user_id = update.effective_user.id
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)

        prof.icr = cf  # –≥/–µ–¥
        prof.cf = icr  # –º–º–æ–ª—å/–ª
        prof.target_bg = target
        session.commit()
        session.close()

        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
            f"‚Ä¢ –ò–ö–•: {icr} –º–º–æ–ª—å/–ª\n"
            f"‚Ä¢ –ö–ß: {cf} –≥/–µ–¥.\n"
            f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª"
            + warning_msg,
            parse_mode="Markdown"
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä:\n/profile 2 10 6",
            parse_mode="Markdown"
        )

async def profile_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    profile = session.get(Profile, user_id)
    session.close()

    if not profile:
        await update.message.reply_text(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/profile <–ò–ö–•> <–ö–ß> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 2 10 6",
            parse_mode="Markdown"
        )
        return

    msg = (
        f"üìÑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –ò–ö–•: {profile.cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –ö–ß: {profile.icr} –≥/–µ–¥.\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {profile.target_bg} –º–º–æ–ª—å/–ª"
    )
    await update.message.reply_text(msg)


async def profile_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

# === –î–æ–∑–∞ ===
async def dose_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤?\n"
        "‚Ä¢ üì∑ –§–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏\n"
        "‚Ä¢ ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)\n"
        "‚Ä¢ üî¢ –í–≤–µ—Å—Ç–∏ –•–ï",
        reply_markup=dose_keyboard
    )
    return DOSE_METHOD

async def sugar_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å—Ä–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
    if context.args:
        try:
            sugar = float(context.args[0].replace(",", "."))
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            session = SessionLocal()
            entry = Entry(telegram_id=update.effective_user.id, sugar_before=sugar)
            session.add(entry); session.commit(); session.close()
            await update.message.reply_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {sugar} –º–º–æ–ª—å/–ª", reply_markup=menu_keyboard)
            return ConversationHandler.END
        except ValueError:
            await update.message.reply_text("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /sugar <—á–∏—Å–ª–æ>")
            return ConversationHandler.END

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):", reply_markup=menu_keyboard)
    return SUGAR_VAL

async def sugar_val(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sugar = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return SUGAR_VAL

    session = SessionLocal()
    entry = Entry(telegram_id=update.effective_user.id, sugar_before=sugar)
    session.add(entry); session.commit(); session.close()

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ user_data, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ photo‚Üídose —Å—Ü–µ–Ω–∞—Ä–∏–∏
    context.user_data['sugar'] = sugar

    await update.message.reply_text(f"‚úÖ –°–∞—Ö–∞—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {sugar} –º–º–æ–ª—å/–ª", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def dose_sugar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['sugar'] = float(update.message.text)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–µ —É–≥–ª–µ–≤–æ–¥—ã —Å —Ñ–æ—Ç–æ (–º–µ–Ω—å—à–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
        last_carbs = context.user_data.get('last_carbs')
        last_photo_time = context.user_data.get('last_photo_time')
        now = time.time()
        if last_carbs is not None and last_photo_time and now - last_photo_time < 600:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–≥–ª–µ–≤–æ–¥—ã —Å —Ñ–æ—Ç–æ, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
            sugar = context.user_data['sugar']
            carbs = last_carbs
            user_id = update.effective_user.id
            session = SessionLocal()
            profile = session.get(Profile, user_id)
            if not profile:
                await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile.")
                return ConversationHandler.END
            dose = calc_bolus(carbs, sugar, PatientProfile(profile.icr, profile.cf, profile.target_bg))
            icr = profile.icr
            cf = profile.cf
            target_bg = profile.target_bg
            entry = Entry(telegram_id=user_id, sugar_before=sugar, carbs_g=carbs, dose=dose)
            session.add(entry)
            session.commit()
            session.close()
            await update.message.reply_text(
                f"–ò—Å–ø–æ–ª—å–∑—É—é —É–≥–ª–µ–≤–æ–¥—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ: {carbs} –≥.\n–í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–î.\n"
                f"(–ø—Ä–æ—Ñ–∏–ª—å: –ò–ö–• {cf}, –ö–ß {icr}, —Ü–µ–ª–µ–≤–æ–π {target_bg})",
                reply_markup=menu_keyboard
            )
            # –û—á–∏—â–∞–µ–º last_carbs, —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–ª—É—á–∞–π–Ω–æ
            context.user_data['last_carbs'] = None
            context.user_data['last_xe'] = None
            context.user_data['last_photo_time'] = None
            return ConversationHandler.END
        # --- –î–û–ë–ê–í–õ–ï–ù–û: –µ—Å–ª–∏ last_carbs –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º ---
        await update.message.reply_text(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É–≥–ª–µ–≤–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã –≤—Ä—É—á–Ω—É—é.",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return DOSE_SUGAR

async def dose_carbs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤:
    ‚Äì –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ (awaiting_carbs_after_photo=True),
      —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ—Ç –¥–æ–∑—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ —Ñ–æ—Ç–æ;
    ‚Äì –∏–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ¬´/dose¬ª: —Å–∞—Ö–∞—Ä —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω, –∑–∞–¥–∞—é—Ç—Å—è —É–≥–ª–µ–≤–æ–¥—ã.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        carbs_input = float(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≥—Ä–∞–º–º–æ–≤ —É–≥–ª–µ–≤–æ–¥–æ–≤.")
        return DOSE_CARBS

    user_id = update.effective_user.id
    session = SessionLocal()

    # –°—Ü–µ–Ω–∞—Ä–∏–π: –≤–≤–æ–¥ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ
    if context.user_data.pop('awaiting_carbs_after_photo', False):
        sugar     = context.user_data.pop('sugar')
        photo_path = context.user_data.pop('photo_path', None)
        xe        = context.user_data.pop('xe', None)

        profile = session.get(Profile, user_id)
        if not profile:
            session.close()
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile.", reply_markup=menu_keyboard)
            return ConversationHandler.END

        dose = calc_bolus(carbs_input, sugar,
                          PatientProfile(profile.icr, profile.cf, profile.target_bg))

        entry = Entry(
            telegram_id   = user_id,
            photo_path    = photo_path,
            carbs_g       = carbs_input,
            xe            = xe,
            sugar_before  = sugar,
            dose          = dose
        )
        session.add(entry)
        session.commit()
        session.close()

        await update.message.reply_text(
            f"üíâ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –¥–æ–∑–∞: {dose} –ï–¥\n"
            f"(—É–≥–ª–µ–≤–æ–¥—ã: {carbs_input} –≥, —Å–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª)",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    # –û–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π /dose: —É–≥–ª–µ–≤–æ–¥—ã –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–∞—Ö–∞—Ä–∞
    sugar = context.user_data.get('sugar')
    if sugar is None:
        session.close()
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π /dose –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π ¬´üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞¬ª.",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    profile = session.get(Profile, user_id)
    if not profile:
        session.close()
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    dose = calc_bolus(carbs_input, sugar,
                      PatientProfile(profile.icr, profile.cf, profile.target_bg))

    entry = Entry(
        telegram_id  = user_id,
        sugar_before = sugar,
        carbs_g      = carbs_input,
        dose         = dose
    )
    session.add(entry)
    session.commit()
    session.close()

    await update.message.reply_text(
        f"üíâ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –¥–æ–∑–∞: {dose} –ï–¥\n"
        f"(—É–≥–ª–µ–≤–æ–¥—ã: {carbs_input} –≥, —Å–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª)",
        reply_markup=menu_keyboard
    )
    return ConversationHandler.END

async def dose_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def dose_method_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üì∑ –§–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ /dose,
        # –∞ –¥–∞–ª—å—à–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π photo_conv
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –±–ª—é–¥–∞:",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    if text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=menu_keyboard
        )
        return DOSE_CARBS

    if text == "üî¢ –í–≤–µ—Å—Ç–∏ –•–ï":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª–µ–±–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (–•–ï):",
            reply_markup=menu_keyboard
        )
        return DOSE_XE

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –∏–∑ –º–µ–Ω—é
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
        reply_markup=dose_keyboard
    )
    return DOSE_METHOD


async def dose_xe_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        xe = float(update.message.text.replace(",", "."))
        context.user_data['xe'] = xe
        # —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å–∏–º —Å–∞—Ö–∞—Ä, –¥–∞–ª—å—à–µ –ø–æ–π–¥—ë—Ç –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π sugar‚Üícarbs‚Üídose
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):", reply_markup=menu_keyboard)
        return DOSE_SUGAR
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –•–ï.")
        return DOSE_XE


async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Assistant API,
    –∂–¥—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (GPT-4o), –∏–∑–≤–ª–µ–∫–∞–µ—Ç —É–≥–ª–µ–≤–æ–¥—ã/–•–ï
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É —Å–∞—Ö–∞—Ä–∞.
    """
    user_id = update.effective_user.id
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    os.makedirs("photos", exist_ok=True)
    path = f"photos/{user_id}_{photo.file_unique_id}.jpg"
    await file.download_to_drive(path)

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    session = SessionLocal()
    user = session.get(User, user_id)
    profile = session.get(Profile, user_id)
    session.close()

    profile_text = None
    if profile:
        profile_text = (
            f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"- –ò–ö–•: {profile.icr} –≥/–µ–¥\n"
            f"- –ö–ß: {profile.cf} –º–º–æ–ª—å/–ª\n"
            f"- –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {profile.target_bg} –º–º–æ–ª—å/–ª\n"
        )
        # sugar = context.user_data.get("sugar")
        # if sugar is not None:
        #     profile_text += f"- –¢–µ–∫—É—â–∏–π —Å–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª\n"
    else:
        profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω."

    # --- –ü–µ—Ä–µ–¥–∞—ë–º –∏ —Ç–µ–∫—Å—Ç, –∏ —Ñ–æ—Ç–æ ---
    run = send_message(user.thread_id, content=profile_text, image_path=path)

    await update.message.reply_text(
        "–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...",
        reply_markup=menu_keyboard
    )

    # –ñ–¥—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    while run.status in ["queued", "in_progress"]:
        run = client.beta.threads.runs.retrieve(thread_id=user.thread_id, run_id=run.id)
        await asyncio.sleep(1)

    # –ü–æ–ª—É—á–∞–µ–º –°–ê–ú–û–ï –°–í–ï–ñ–ï–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
    msgs = client.beta.threads.messages.list(
        thread_id=user.thread_id,
        order="desc",
        limit=1
    ).data
    if not msgs:
        await update.message.reply_text("‚ùó –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    last = msgs[0]  # —Å–∞–º–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    blocks = getattr(last, "content", [])
    response_text = None
    for blk in blocks:
        txt = getattr(blk, "text", None)
        if txt:
            response_text = txt.value
            break

    logging.info(f"user_id={user_id} response_text={response_text}")

    if not response_text:
        await update.message.reply_text(
            "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏—Å–ª–∞–ª –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    # --- –í–°–ï–ì–î–ê –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —á–∞—Ç ---
    await update.message.reply_text(response_text, reply_markup=menu_keyboard)

    # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è response_text:
    if len(response_text.strip()) < 30 or response_text.strip().lower() in ["üì∑ —Ñ–æ—Ç–æ –µ–¥—ã", "—á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ?", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî —è –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —É–≥–ª–µ–≤–æ–¥—ã –∏ —Ö–ª–µ–±–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã (—Ö–µ), –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ–∑—É –∏–Ω—Å—É–ª–∏–Ω–∞, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞."]:
        await update.message.reply_text(
            "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=menu_keyboard
        )
        context.user_data[WAITING_GPT_FLAG] = False
        return ConversationHandler.END

    # 5) –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —É–≥–ª–µ–≤–æ–¥—ã –∏ –•–ï
    carbs, xe = extract_nutrition_info(response_text)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data["last_carbs"]      = carbs
    context.user_data["last_xe"]         = xe
    context.user_data["last_photo_time"] = time.time()
    context.user_data["photo_path"]      = path
    context.user_data["carbs"]           = carbs
    context.user_data["xe"]              = xe

    # 6) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    session = SessionLocal()
    user_id = update.effective_user.id
    profile = session.get(Profile, user_id)
    session.close()

    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ—Ä–∞–∑—É GPT –ø—Ä–æ –≤–≤–æ–¥ –ø—Ä–æ—Ñ–∏–ª—è, –∞ —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º –¥–æ–∑—É
    if profile and carbs is not None:
        sugar = context.user_data.get('sugar')
        if sugar is not None:
            dose = calc_bolus(carbs, sugar, PatientProfile(profile.icr, profile.cf, profile.target_bg))
            entry = Entry(
                telegram_id=user_id,
                photo_path=path,
                carbs_g=carbs,
                xe=xe,
                sugar_before=sugar,
                dose=dose
            )
            session = SessionLocal()
            session.add(entry)
            session.commit()
            session.close()
            await update.message.reply_text(
                f"üíâ –í–∞—à–∞ –¥–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞: {dose} –ï–¥\n"
                f"(—É–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥, —Å–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª)",
                reply_markup=menu_keyboard
            )
            return ConversationHandler.END
        else:
            # –ï—Å–ª–∏ —Å–∞—Ö–∞—Ä–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–∞—Ö–∞—Ä
            await update.message.reply_text(
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):",
                reply_markup=menu_keyboard
            )
            return PHOTO_SUGAR
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–∞—Ö–∞—Ä
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):",
            reply_markup=menu_keyboard
        )
        return PHOTO_SUGAR

    context.user_data[WAITING_GPT_FLAG] = False

    # –í photo_handler –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è response_text:
    logging.info(f"user_id={user_id} response={response_text}")

async def photo_sugar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–∞—Ö–∞—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ.
    –ï—Å–ª–∏ —É–≥–ª–µ–≤–æ–¥—ã –Ω–µ –±—ã–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å /dose –∏ –≤–≤–æ–¥–∏—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é,
    –∏–Ω–∞—á–µ —Å—Ä–∞–∑—É –≤—ã—á–∏—Å–ª—è–µ—Ç –¥–æ–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π.
    """
    if context.user_data.get(WAITING_GPT_FLAG):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ñ–æ—Ç–æ.")
        return ConversationHandler.END

    # 1) –°—á–∏—Ç–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Å–∞—Ö–∞—Ä
    try:
        sugar = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º–æ–ª—å/–ª.")
        return PHOTO_SUGAR

    # 2) –î–æ—Å—Ç–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
    carbs      = context.user_data.get("carbs")
    xe         = context.user_data.get("xe")
    photo_path = context.user_data.get("photo_path")
    user_id    = update.effective_user.id

    # 3) –ï—Å–ª–∏ —É–≥–ª–µ–≤–æ–¥—ã –∏–∑ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã, –Ω–æ –µ—Å—Ç—å –•–ï ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º xe*profile.icr
    session = SessionLocal()
    profile = session.get(Profile, user_id)
    if not profile:
        session.close()
        await update.message.reply_text(
            "‚ùó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /profile.",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    if carbs is None and xe is not None:
        carbs = xe * profile.icr
        xe_info = f" (—Ä–∞—Å—á—ë—Ç –ø–æ –•–ï: {xe} –•–ï √ó {profile.icr} –≥/–µ–¥.)"
    else:
        xe_info = ""

    # 4) –ï—Å–ª–∏ —É–≥–ª–µ–≤–æ–¥—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã
    if carbs is None:
        session.close()
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ —Ñ–æ—Ç–æ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 'üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞' –∏–ª–∏ /dose –∏ –≤–≤–µ–¥–∏—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã –≤—Ä—É—á–Ω—É—é:",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    # 5) –ò–Ω–∞—á–µ ‚Äî —Ä–∞—Å—á—ë—Ç –¥–æ–∑—ã
    dose = calc_bolus(carbs, sugar, PatientProfile(profile.icr, profile.cf, profile.target_bg))

    # 6) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    entry = Entry(
        telegram_id   = user_id,
        photo_path    = photo_path,
        carbs_g       = carbs,
        xe            = xe,
        sugar_before  = sugar,
        dose          = dose
    )
    session.add(entry)
    session.commit()
    session.close()

    # 7) –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for key in ("carbs", "xe", "photo_path"):
        context.user_data.pop(key, None)

    # 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã—Ö–æ–¥–∏–º
    await update.message.reply_text(
        f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥{xe_info}\n"
        f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–¥",
        reply_markup=menu_keyboard
    )
    return ConversationHandler.END


async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    entries = session.query(Entry).filter_by(telegram_id=user_id).order_by(Entry.timestamp.desc()).limit(5).all()
    session.close()
    if not entries:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
    for e in entries:
        text += f"\n{e.timestamp.strftime('%d.%m %H:%M')} ‚Äî –°–∞—Ö–∞—Ä: {e.sugar_before or '-'} –º–º–æ–ª—å/–ª, –£–≥–ª–µ–≤–æ–¥—ã: {e.carbs_g or '-'} –≥, –î–æ–∑–∞: {e.dose or '-'} –ï–¥"
    await update.message.reply_text(text)

async def chat_with_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    session = SessionLocal()
    user_id = update.effective_user.id
    user = session.get(User, user_id)
    session.close()
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    run = send_message(user.thread_id, content=update.message.text)
    await update.message.reply_text("–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT...")
    while run.status in ["queued", "in_progress"]:
        run = client.beta.threads.runs.retrieve(thread_id=user.thread_id, run_id=run.id)
        await asyncio.sleep(2)
    messages = client.beta.threads.messages.list(thread_id=user.thread_id)
    reply = messages.data[0].content[0].text.value
    await update.message.reply_text(reply)

def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    sugar_conv = ConversationHandler(
    entry_points=[
        CommandHandler("sugar", sugar_start),
    ],
    states={
        SUGAR_VAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, sugar_val)],
    },
    fallbacks=[CommandHandler("cancel", cancel_handler)],
)

    photo_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.PHOTO, photo_handler)],
    states={
        PHOTO_SUGAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, photo_sugar_handler)],
    },
    fallbacks=[CommandHandler("cancel", cancel_handler)],
)


    dose_conv = ConversationHandler(
    entry_points=[
        CommandHandler("dose", dose_start),
        MessageHandler(filters.Regex("^üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞$"), dose_start),
    ],
    states={
        DOSE_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_method_choice)],
        DOSE_XE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_xe_handler)],
        DOSE_SUGAR:  [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_sugar)],
        DOSE_CARBS:  [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_carbs)],
    },
    fallbacks=[CommandHandler("cancel", dose_cancel)],
)

    

    profile_conv = ConversationHandler(
        entry_points=[
            CommandHandler("profile", profile_start),
            MessageHandler(filters.Regex(r"^üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å$"), profile_start)
        ],
        states={
            PROFILE_ICR:    [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_icr)],
            PROFILE_CF:     [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_cf)],
            PROFILE_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_target)],
        },
        fallbacks=[CommandHandler("cancel", profile_cancel)],
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_handler))
    app.add_handler(CommandHandler("reset", reset_handler))
    app.add_handler(CommandHandler("history", history_handler))
    app.add_handler(CommandHandler("profile", profile_command))
    
    app.add_handler(MessageHandler(filters.Regex("^üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$"), profile_view))
    app.add_handler(MessageHandler(filters.Regex(r"^üìä –ò—Å—Ç–æ—Ä–∏—è$"), history_handler))
    app.add_handler(MessageHandler(filters.Regex(r"^‚ùì –ú–æ–π —Å–∞—Ö–∞—Ä$"), sugar_start))
    app.add_handler(sugar_conv)
    app.add_handler(photo_conv)
    app.add_handler(profile_conv)
    app.add_handler(dose_conv)
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_gpt))
    app.run_polling()

if __name__ == "__main__":
    main()
