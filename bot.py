# bot.py
import os
import re
import asyncio
import time
import logging
# bot.py  ‚Äì –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å‚ÄØ(–≥–¥–µ —É–∂–µ –µ—Å—Ç—å import datetime)
from datetime import datetime, timezone   # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ timezone

from gpt_command_parser import parse_command
from telegram.ext import MessageHandler, filters
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from db import SessionLocal, init_db, User, Profile, Entry
from gpt_client import create_thread, send_message, client
from functions import PatientProfile, calc_bolus
from config import TELEGRAM_TOKEN
from datetime import datetime
from sqlalchemy import DateTime, func
from db import SessionLocal, Entry, Profile, User, init_db
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import func          # —É–∂–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ# ‚ñ∏ bot.py  (–ø–æ–ª–æ–∂–∏—Ç–µ —Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ async‚Äë—Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏)
from pathlib import Path


PROFILE_ICR, PROFILE_CF, PROFILE_TARGET         = range(0, 3)    # 0,1,2
DOSE_METHOD, DOSE_XE, DOSE_SUGAR, DOSE_CARBS    = range(3, 7)    # 3,4,5,6
PHOTO_SUGAR                                     = 7              # –ø–æ—Å–ª–µ DOSE_CARBS
SUGAR_VAL                                       = 8              # –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è /sugar
# (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∑—ã –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏  –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å 9 –∏ 10)

WAITING_GPT_FLAG = "waiting_gpt_response"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞
dose_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üì∑ –§–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏")],
        [KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)")],
        [KeyboardButton("üî¢ –í–≤–µ—Å—Ç–∏ –•–ï")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True
)

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üì∑ –§–æ—Ç–æ –µ–¥—ã")], 
        [KeyboardButton("üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞"), KeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("üîÅ –°–±—Ä–æ—Å"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤) –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞:
logging.basicConfig(filename='gpt_responses.log', level=logging.INFO, format='%(asctime)s %(message)s')
logger = logging.getLogger("bot")
logger.setLevel(logging.INFO)





# bot.py  (–ø–æ–∫–∞–∑—ã–≤–∞—é —Ü–µ–ª–∏–∫–æ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)

import re
from datetime import datetime, time as dtime
# ...

# bot.py
from datetime import datetime, time as dtime, timezone
# ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∏–º–ø–æ—Ä—Ç ‚Ä¶

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def freeform_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—É—é pending_entry, –µ—Å–ª–∏ –µ—Å—Ç—å
    context.user_data.pop('pending_entry', None)
    raw_text = update.message.text.strip()
    user_id  = update.effective_user.id
    logger.info(f"FREEFORM raw='{raw_text}'  user={user_id}")

    parsed = await parse_command(raw_text)
    logger.info(f"FREEFORM parsed={parsed}")

    # –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –Ω–µ –¥–∞–ª JSON‚Äë–∫–æ–º–∞–Ω–¥—É ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
    if not parsed or parsed.get("action") != "add_entry":
        return

    fields      = parsed["fields"]
    entry_date  = parsed.get("entry_date")   # ISO‚Äë—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ None
    time_str    = parsed.get("time")         # "HH:MM" –∏–ª–∏ None

    # ‚îÄ‚îÄ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º event_time ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if entry_date:
        try:
            event_dt = datetime.fromisoformat(entry_date).replace(tzinfo=timezone.utc)
        except ValueError:
            event_dt = datetime.now(timezone.utc)
    elif time_str:
        try:
            hh, mm = map(int, time_str.split(":"))
            today  = datetime.now().date()
            event_dt = datetime.combine(today, dtime(hh, mm))
        except Exception:
            event_dt = datetime.now()
    else:
        event_dt = datetime.now(timezone.utc)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ–∫
    context.user_data['pending_entry'] = {
        'telegram_id': user_id,
        'event_time': event_dt,
        'xe': fields.get('xe'),
        'carbs_g': fields.get('carbs_g'),
        'dose': fields.get('dose'),
        'sugar_before': fields.get('sugar_before'),
        'photo_path': None
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    xe_val     = fields.get('xe')
    carbs_val  = fields.get('carbs_g')
    dose_val   = fields.get('dose')
    sugar_val  = fields.get('sugar_before')
    date_str   = event_dt.strftime("%d.%m %H:%M")
    xe_part    = f"{xe_val}‚ÄØ–•–ï"               if xe_val   is not None else ""
    carb_part  = f"{carbs_val:.0f}‚ÄØ–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤" if carbs_val is not None else ""
    dose_part  = f"–ò–Ω—Å—É–ª–∏–Ω: {dose_val}‚ÄØ–µ–¥"    if dose_val is not None else ""
    sugar_part = f"–°–∞—Ö–∞—Ä: {sugar_val}‚ÄØ–º–º–æ–ª—å/–ª" if sugar_val is not None else ""
    lines = "  \n- ".join(filter(None, [xe_part or carb_part, dose_part, sugar_part]))

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
        ]
    ])
    reply = f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n\n{date_str}  \n- {lines}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫?"
    await update.message.reply_text(reply, reply_markup=keyboard)
    return ConversationHandler.END


def extract_nutrition_info(text: str):
    """
    –ò—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ:
      ‚Ä¢ ¬´–£–≥–ª–µ–≤–æ–¥—ã: 37 –≥ ¬± 3 –≥¬ª  ‚Üí carbs = 37
      ‚Ä¢ ¬´–•–ï: 3,1 ¬± 0,2¬ª         ‚Üí xe    = 3.1
      ‚Ä¢ –¥–∏–∞–ø–∞–∑–æ–Ω ¬´20‚Äì25 –≥¬ª      ‚Üí carbs = —Å—Ä–µ–¥–Ω–µ–µ
      ‚Ä¢ –¥–∏–∞–ø–∞–∑–æ–Ω ¬´3‚Äì4 –•–ï¬ª       ‚Üí xe    = —Å—Ä–µ–¥–Ω–µ–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (carbs_g, xe)
    """
    carbs = xe = None
    # --- –Ω–æ–≤—ã–π —Å—Ç—Ä–æ–≥–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–æ –∑–Ω–∞–∫–æ–º ¬± ---
    m = re.search(r"—É–≥–ª–µ–≤–æ–¥[^\d]*:\s*([\d.,]+)\s*–≥", text, re.IGNORECASE)
    if m:
        carbs = float(m.group(1).replace(",", "."))

    m = re.search(r"\b—Ö[–µe][^\d]*:\s*([\d.,]+)", text, re.IGNORECASE)
    if m:
        xe = float(m.group(1).replace(",", "."))

    # --- –¥–∏–∞–ø–∞–∑–æ–Ω—ã ¬´20‚Äì25 –≥¬ª / ¬´3‚Äì4 –•–ï¬ª ---
    if carbs is None:
        rng = re.search(r"(\d+[.,]?\d*)\s*[‚Äì-]\s*(\d+[.,]?\d*)\s*–≥", text, re.IGNORECASE)
        if rng:
            carbs = (float(rng.group(1).replace(",", ".")) +
                     float(rng.group(2).replace(",", "."))) / 2

    if xe is None:
        rng = re.search(r"(\d+[.,]?\d*)\s*[‚Äì-]\s*(\d+[.,]?\d*)\s*(?:–•–ï|XE)", text, re.IGNORECASE)
        if rng:
            xe = (float(rng.group(1).replace(",", ".")) +
                  float(rng.group(2).replace(",", "."))) / 2

    return carbs, xe

# ‚ñ∏ bot.py  (–ø–æ–ª–æ–∂–∏—Ç–µ —Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ async‚Äë—Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏)
async def apply_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º pending_entry (–µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î)
    if context.user_data.get('pending_entry') is not None and context.user_data.get('edit_id') is None:
        entry = context.user_data['pending_entry']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Å–∞—Ö–∞—Ä
        only_sugar = (
            entry.get('carbs_g') is None and entry.get('xe') is None and entry.get('dose') is None and entry.get('photo_path') is None
        )
        text = update.message.text.lower().strip()
        if only_sugar:
            # –û–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞
            try:
                sugar = float(text.replace(",", "."))
                entry['sugar_before'] = sugar
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–∞—Ö–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º–æ–ª—å/–ª.")
                return
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
                    InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
                ]
            ])
            await update.message.reply_text(
                f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ {sugar} –º–º–æ–ª—å/–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
                reply_markup=keyboard
            )
            return
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –æ–∂–∏–¥–∞–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ key=value
        parts = dict(re.findall(r"(\w+)\s*=\s*([\d.]+)", text))
        if not parts:
            await update.message.reply_text("–ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            return
        if "xe" in parts:    entry['xe']           = float(parts["xe"])
        if "carbs" in parts: entry['carbs_g']      = float(parts["carbs"])
        if "dose" in parts:  entry['dose']         = float(parts["dose"])
        if "—Å–∞—Ö–∞—Ä" in parts or "sugar" in parts:
            entry['sugar_before'] = float(parts.get("—Å–∞—Ö–∞—Ä") or parts["sugar"])
        # –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        carbs = entry.get('carbs_g')
        xe = entry.get('xe')
        sugar = entry.get('sugar_before')
        dose = entry.get('dose')
        xe_info = f", –•–ï: {xe}" if xe is not None else ""
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
            ]
        ])
        await update.message.reply_text(
            f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥{xe_info}\n"
            f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª\n"
            f"‚Ä¢ –í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–¥\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
            reply_markup=keyboard
        )
        return
    # --- –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ ---
    if "edit_id" not in context.user_data:    # –Ω–µ—Ç —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return

    text = update.message.text.lower()
    parts = dict(re.findall(r"(\w+)\s*=\s*([\d.]+)", text))
    if not parts:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    with SessionLocal() as s:
        entry = s.get(Entry, context.user_data["edit_id"])
        if not entry:
            await update.message.reply_text("–ó–∞–ø–∏—Å—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
            context.user_data.pop("edit_id")
            return

        # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if "xe" in parts:    entry.xe           = float(parts["xe"])
        if "carbs" in parts: entry.carbs_g      = float(parts["carbs"])
        if "dose" in parts:  entry.dose         = float(parts["dose"])
        if "—Å–∞—Ö–∞—Ä" in parts or "sugar" in parts:
            entry.sugar_before = float(parts.get("—Å–∞—Ö–∞—Ä") or parts["sugar"])
        entry.updated_at = datetime.utcnow()
        s.commit()

    context.user_data.pop("edit_id")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –∏–∑ /history –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π ACK
    data = query.data

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ ---
    if data == "confirm_entry":
        entry_data = context.user_data.pop('pending_entry', None)
        if not entry_data:
            await query.edit_message_text("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        session = SessionLocal()
        entry = Entry(**entry_data)
        session.add(entry)
        session.commit()
        session.close()
        await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!")
        return
    if data == "edit_entry":
        entry_data = context.user_data.get('pending_entry')
        if not entry_data:
            await query.edit_message_text("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (apply_edit)
        context.user_data['edit_id'] = None  # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pending_entry —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
        await query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`—Å–∞—Ö–∞—Ä=<–º–º–æ–ª—å/–ª>  xe=<–•–ï>  carbs=<–≥>  dose=<–µ–¥>`\n"
            "–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –≤—Å–µ –ø–æ–ª—è (—á—Ç–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ ‚Äî —Ç–æ –∏ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è).",
            parse_mode="Markdown"
        )
        # –î–∞–ª–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, –∏ apply_edit –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å pending_entry
        return
    if data == "cancel_entry":
        context.user_data.pop('pending_entry', None)
        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=menu_keyboard)
        return

    # --- –°—Ç–∞—Ä—ã–π –∫–æ–¥: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---
    if ":" in data:
        action, entry_id = data.split(":", 1)
        with SessionLocal() as s:
            entry = s.get(Entry, int(entry_id))
            if not entry:
                await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—É–∂–µ —É–¥–∞–ª–µ–Ω–∞).")
                return
            if action == "del":
                s.delete(entry)
                s.commit()
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
                return
            if action == "edit":
                context.user_data["edit_id"] = entry.id
                txt = (
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "`—Å–∞—Ö–∞—Ä=<–º–º–æ–ª—å/–ª>  xe=<–•–ï>  carbs=<–≥>  dose=<–µ–¥>`\n"
                    "–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –≤—Å–µ –ø–æ–ª—è (—á—Ç–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ ‚Äî —Ç–æ –∏ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è).",
                )
                await query.edit_message_text("\n".join(txt), parse_mode="Markdown")
                return

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    user = session.get(User, user_id)

    if not user:
        thread_id = create_thread()
        user = User(telegram_id=user_id, thread_id=thread_id)
        session.add(user)
        session.commit()

    session.close()

    await update.message.reply_text(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!</b>\n"
        "üìò –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —Ç–≤–æ–π –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–Ω–µ–≤–Ω–∏–∫:\n"
        "‚Ä¢ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏,\n"
        "‚Ä¢ —Å—á–∏—Ç–∞—Ç—å –¥–æ–∑—É üíâ,\n"
        "‚Ä¢ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ üçΩÔ∏è\n\n"
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: <code>–Ø —Å—ä–µ–ª 4 –•–ï, —É–∫–æ–ª–æ–ª 6 –µ–¥</code>\n"
        "üì∑ –ò–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –µ–¥—ã ‚Äî —è –≤—Å—ë —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –ø–æ–¥—Å–∫–∞–∂—É –¥–æ–∑—É!\n"
        "ü§ñ –û—Å—Ç–∞–ª—å–Ω–æ–µ —è –≤–æ–∑—å–º—É –Ω–∞ —Å–µ–±—è.\n\n"
        "üîé –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ù–∞–∂–º–∏ ¬´üìÑ –ß—Ç–æ —É–º–µ—é¬ª –≤ –º–µ–Ω—é Telegram.",
        parse_mode="HTML",
        reply_markup=menu_keyboard
    )

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üìã <b>–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π:</b>\n\n"
        "üì∑ <b>–§–æ—Ç–æ –µ–¥—ã</b> ‚Äî –ø—Ä–∏—à–ª–∏ —Å–Ω–∏–º–æ–∫, —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –•–ï –∏ –ø–æ—Å—á–∏—Ç–∞—é –¥–æ–∑—É\n"
        "üíâ <b>–î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞</b> ‚Äî —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –•–ï/—É–≥–ª–µ–≤–æ–¥–æ–≤ + —Å–∞—Ö–∞—Ä\n"
        "üìä <b>–ò—Å—Ç–æ—Ä–∏—è</b> ‚Äî –ø–æ–∫–∞–∂—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n"
        "üìÑ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ò–ö–•/–ö–ß –∏ —Ü–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä\n"
        "üîÑ <b>–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –µ—Å–ª–∏ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "üîÅ <b>–°–±—Ä–æ—Å</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏\n\n"
        "‚úçÔ∏è –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ: ¬´—è —Å—ä–µ–ª 3 –•–ï¬ª, ¬´–¥–æ–±–∞–≤—å —Å–∞—Ö–∞—Ä 7.5¬ª –∏ —Ç.–¥.",
        parse_mode="HTML",
        reply_markup=menu_keyboard
    )

async def reset_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    session.query(Entry).filter_by(telegram_id=user_id).delete()
    session.query(Profile).filter_by(telegram_id=user_id).delete()
    session.commit()
    session.close()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=menu_keyboard)

# === –ü—Ä–æ—Ñ–∏–ª—å ===
async def profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    profile = session.get(Profile, user_id)
    session.close()
    
    current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.icr} –≥/–µ–¥.)" if profile and profile.icr else ""
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –ò–ö–• (—Å–∫–æ–ª—å–∫–æ –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ 1 –µ–¥. –∏–Ω—Å—É–ª–∏–Ω–∞) {current_value}:"
    )
    return PROFILE_ICR

async def profile_icr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['icr'] = float(update.message.text)
        
        session = SessionLocal()
        profile = session.get(Profile, update.effective_user.id)
        session.close()

        current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.cf} –º–º–æ–ª—å/–ª)" if profile and profile.cf else ""
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–ö–ß) {current_value}:"
        )
        return PROFILE_CF
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_ICR

async def profile_cf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['cf'] = float(update.message.text)

        session = SessionLocal()
        profile = session.get(Profile, update.effective_user.id)
        session.close()

        current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.target_bg} –º–º–æ–ª—å/–ª)" if profile and profile.target_bg else ""
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ {current_value}:"
        )
        return PROFILE_TARGET
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_CF

async def profile_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['target'] = float(update.message.text)
        session = SessionLocal()
        user_id = update.effective_user.id
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)
        prof.icr = context.user_data['icr']
        prof.cf = context.user_data['cf']
        prof.target_bg = context.user_data['target']
        session.commit()
        session.close()
        await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=menu_keyboard)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_TARGET
    
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 3:
        await update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/profile <–ò–ö–•> <–ö–ß> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 2 10 6",
            parse_mode="Markdown"
        )
        return

    try:
        icr = float(args[0])
        cf = float(args[1])
        target = float(args[2])

        # –§–ª–∞–≥–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è
        suspicious = False
        warning_msg = ""

        if icr > 8 or cf < 3:
            suspicious = True
            warning_msg = (
                "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–µ—Å—Ç–∞–º–∏ –ò–ö–• –∏ –ö–ß.\n"
                f"‚Ä¢ –í—ã –≤–≤–µ–ª–∏ –ò–ö–• = {icr} –º–º–æ–ª—å/–ª (–≤—ã—Å–æ–∫–æ–≤–∞—Ç–æ)\n"
                f"‚Ä¢ –ö–ß = {cf} –≥/–µ–¥. (–Ω–∏–∑–∫–æ–≤–∞—Ç–æ)\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                f"/profile {cf} {icr} {target}\n"
            )

        session = SessionLocal()
        user_id = update.effective_user.id
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)

        prof.icr = cf  # –≥/–µ–¥
        prof.cf = icr  # –º–º–æ–ª—å/–ª
        prof.target_bg = target
        session.commit()
        session.close()

        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
            f"‚Ä¢ –ò–ö–•: {icr} –º–º–æ–ª—å/–ª\n"
            f"‚Ä¢ –ö–ß: {cf} –≥/–µ–¥.\n"
            f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª"
            + warning_msg,
            parse_mode="Markdown"
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä:\n/profile 2 10 6",
            parse_mode="Markdown"
        )

async def profile_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    profile = session.get(Profile, user_id)
    session.close()

    if not profile:
        await update.message.reply_text(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/profile <–ò–ö–•> <–ö–ß> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 2 10 6",
            parse_mode="Markdown"
        )
        return

    msg = (
        f"üìÑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –ò–ö–•: {profile.cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –ö–ß: {profile.icr} –≥/–µ–¥.\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {profile.target_bg} –º–º–æ–ª—å/–ª"
    )
    await update.message.reply_text(msg)


async def profile_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def photo_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'üì∑ –§–æ—Ç–æ –µ–¥—ã'"""
    await update.message.reply_text(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –∏ —è –æ—Ü–µ–Ω—é —É–≥–ª–µ–≤–æ–¥—ã –∏ –•–ï.",
        reply_markup=menu_keyboard
    )

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

# === –î–æ–∑–∞ ===
async def dose_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤?\n"
        "‚Ä¢ üì∑ –§–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏\n"
        "‚Ä¢ ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)\n"
        "‚Ä¢ üî¢ –í–≤–µ—Å—Ç–∏ –•–ï",
        reply_markup=dose_keyboard
    )
    return DOSE_METHOD

async def sugar_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å—Ä–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
    if context.args:
        try:
            sugar = float(context.args[0].replace(",", "."))
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            session = SessionLocal()
            entry = Entry(telegram_id=update.effective_user.id, sugar_before=sugar)
            session.add(entry); session.commit(); session.close()
            await update.message.reply_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {sugar} –º–º–æ–ª—å/–ª", reply_markup=menu_keyboard)
            return ConversationHandler.END
        except ValueError:
            await update.message.reply_text("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /sugar <—á–∏—Å–ª–æ>")
            return ConversationHandler.END

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):", reply_markup=menu_keyboard)
    return SUGAR_VAL

async def sugar_val(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—É—é pending_entry, –µ—Å–ª–∏ –µ—Å—Ç—å
    context.user_data.pop('pending_entry', None)
    try:
        sugar = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return SUGAR_VAL

    user_id = update.effective_user.id
    event_time = datetime.now(timezone.utc)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ–∫
    context.user_data['pending_entry'] = {
        'telegram_id': user_id,
        'event_time': event_time,
        'photo_path': None,
        'carbs_g': None,
        'xe': None,
        'sugar_before': sugar,
        'dose': None
    }
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
        ]
    ])
    await update.message.reply_text(
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ {sugar} –º–º–æ–ª—å/–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
        reply_markup=keyboard
    )
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def dose_sugar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—É—é pending_entry, –µ—Å–ª–∏ –µ—Å—Ç—å
    context.user_data.pop('pending_entry', None)
    try:
        sugar = float(update.message.text.replace(",", "."))
        context.user_data["sugar"] = sugar
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return DOSE_SUGAR

    user_id = update.effective_user.id
    session = SessionLocal()
    profile = session.get(Profile, user_id)
    if not profile:
        session.close()
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile.")
        return ConversationHandler.END

    icr, cf, target_bg = profile.icr, profile.cf, profile.target_bg

    last_carbs = context.user_data.get("last_carbs")
    last_photo_time = context.user_data.get("last_photo_time")
    now = time.time()

    if last_carbs is not None and last_photo_time and now - last_photo_time < 600:
        carbs, xe_val = last_carbs, None
    elif context.user_data.get("xe") is not None:
        xe_val = context.user_data["xe"]
        carbs = xe_val * 12          # 1‚ÄØ–•–ï = 12‚ÄØ–≥
    else:
        session.close()
        await update.message.reply_text(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É–≥–ª–µ–≤–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã –≤—Ä—É—á–Ω—É—é.",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    dose = calc_bolus(carbs, sugar, PatientProfile(icr, cf, target_bg))
    event_time = datetime.now(timezone.utc)
    session.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ–∫
    context.user_data['pending_entry'] = {
        'telegram_id': user_id,
        'event_time': event_time,
        'photo_path': context.user_data.get('photo_path'),
        'carbs_g': carbs,
        'xe': xe_val,
        'sugar_before': sugar,
        'dose': dose
    }

    xe_info = f", –•–ï: {xe_val}" if xe_val is not None else ""
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
        ]
    ])
    await update.message.reply_text(
        f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥{xe_info}\n"
        f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–¥\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
        reply_markup=keyboard
    )
    # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ pending_entry
    for k in ("last_carbs", "last_photo_time", "xe", "sugar", "photo_path"):
        if k in context.user_data and k != 'pending_entry':
            context.user_data.pop(k, None)
    return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚úèÔ∏è ¬´–í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)¬ª
async def dose_carbs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —É–≥–ª–µ–≤–æ–¥—ã –≤—Ä—É—á–Ω—É—é.
      1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
      2. –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–∞—Ö–∞—Ä (–ø–µ—Ä–µ—Ö–æ–¥ –≤ DOSE_SUGAR).
      3. –î–æ–∑—É —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç dose_sugar –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–∞—Ö–∞—Ä–∞.
    """
    try:
        carbs_input = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≥—Ä–∞–º–º–æ–≤ —É–≥–ª–µ–≤–æ–¥–æ–≤.")
        return DOSE_CARBS

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–≥–ª–µ–≤–æ–¥—ã –∫–∞–∫ ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–µ¬ª –∏ –ø–æ–º–µ—á–∞–µ–º –≤—Ä–µ–º—è (‚â§10‚ÄØ–º–∏–Ω)
    context.user_data["last_carbs"] = carbs_input
    context.user_data["last_photo_time"] = time.time()

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):",
        reply_markup=menu_keyboard
    )
    return DOSE_SUGAR
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


async def dose_method_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üì∑ –§–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ /dose,
        # –∞ –¥–∞–ª—å—à–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π photo_conv
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –±–ª—é–¥–∞:",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    if text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=menu_keyboard
        )
        return DOSE_CARBS

    if text == "üî¢ –í–≤–µ—Å—Ç–∏ –•–ï":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª–µ–±–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (–•–ï):",
            reply_markup=menu_keyboard
        )
        return DOSE_XE

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –∏–∑ –º–µ–Ω—é
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
        reply_markup=dose_keyboard
    )
    return DOSE_METHOD


async def dose_xe_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        xe = float(update.message.text.replace(",", "."))
        context.user_data['xe'] = xe
        # —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å–∏–º —Å–∞—Ö–∞—Ä, –¥–∞–ª—å—à–µ –ø–æ–π–¥—ë—Ç –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π sugar‚Üícarbs‚Üídose
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):", reply_markup=menu_keyboard)
        return DOSE_SUGAR
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –•–ï.")
        return DOSE_XE


async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1. –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞ –¥–∏—Å–∫.
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ GPT (assistant API).
    3. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–≥–ª–µ–≤–æ–¥—ã / –•–ï –∏–∑ –æ—Ç–≤–µ—Ç–∞.
    4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ user_data (–¥–æ –≤–≤–æ–¥–∞ —Å–∞—Ö–∞—Ä–∞) –∏–ª–∏
       —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Å–∞—Ö–∞—Ä —É–∂–µ –≤–≤–µ–¥—ë–Ω.
    """
    user_id = update.effective_user.id

        # ‚îÄ‚îÄ 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    path = context.user_data.pop("__file_path", None)
    if path is None:                          # –æ–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π ¬´—Ñ–æ—Ç–æ¬ª
        photo = update.message.photo[-1]
        file  = await context.bot.get_file(photo.file_id)
        os.makedirs("photos", exist_ok=True)
        path  = f"photos/{user_id}_{photo.file_unique_id}.jpg"
        await file.download_to_drive(path)


    # ‚îÄ‚îÄ 2. –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    session = SessionLocal()
    user    = session.get(User, user_id)
    profile = session.get(Profile, user_id)
    session.close()

    profile_text = (
        f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"- –ò–ö–•: {profile.icr} –≥/–µ–¥\n"
        f"- –ö–ß: {profile.cf} –º–º–æ–ª—å/–ª\n"
        f"- –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {profile.target_bg} –º–º–æ–ª—å/–ª\n"
    ) if profile else "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω."

    run = send_message(user.thread_id, content=profile_text, image_path=path)
    await update.message.reply_text("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞‚Ä¶", reply_markup=menu_keyboard)

    while run.status in ("queued", "in_progress"):
        run = client.beta.threads.runs.retrieve(thread_id=user.thread_id, run_id=run.id)
        await asyncio.sleep(1)

    # ‚îÄ‚îÄ 3. –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç GPT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    msgs = client.beta.threads.messages.list(thread_id=user.thread_id, order="desc", limit=1).data
    if not msgs:
        await update.message.reply_text("‚ùó –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    response_text = msgs[0].content[0].text.value
    await update.message.reply_text(response_text, reply_markup=menu_keyboard)

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —É–¥–∞–ª–æ—Å—å –ª–∏ GPT —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É
    if len(response_text.strip()) < 30:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    # ‚îÄ‚îÄ 4. –ò–∑–≤–ª–µ–∫–∞–µ–º —É–≥–ª–µ–≤–æ–¥—ã / –•–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    carbs, xe = extract_nutrition_info(response_text)
    context.user_data.update({
        "last_carbs":      carbs,
        "last_xe":         xe,
        "last_photo_time": time.time(),
        "photo_path":      path,
        "carbs":           carbs,
        "xe":              xe,
    })

    # ‚îÄ‚îÄ 5. –ï—Å–ª–∏ —Å–∞—Ö–∞—Ä —É–∂–µ –≤–≤–µ–¥—ë–Ω ‚Äî —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    sugar = context.user_data.get("sugar")
    if carbs is not None and sugar is not None and profile:
        dose = calc_bolus(carbs, sugar, PatientProfile(profile.icr, profile.cf, profile.target_bg))

        session = SessionLocal()
        event_ts = update.message.date  # ‚Üê –≤—Ä–µ–º—è —Å—ä—ë–º–∫–∏ —Ñ–æ—Ç–æ (UTC)
        entry = Entry(
            telegram_id  = user_id,
            event_time   = event_ts,
            photo_path   = path,
            carbs_g      = carbs,
            xe           = xe,
            sugar_before = sugar,
            dose         = dose
        )
        session.add(entry)
        session.commit()
        session.close()

        await update.message.reply_text(
            f"üíâ –í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–¥  (—É–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥, —Å–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª)",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    # ‚îÄ‚îÄ 6. –ò–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–∞—Ö–∞—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):", reply_markup=menu_keyboard)
    return PHOTO_SUGAR
async def doc_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ ¬´—Ñ–∞–π–ª¬ª (document‚Äëimage).
    –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ –æ–±—â–∏–π photo‚Äëflow.
    """
    document = update.message.document
    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à—ë–ª pdf/zip
    if not document or not document.mime_type.startswith("image/"):
        return ConversationHandler.END

    user_id = update.effective_user.id
    # –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    ext  = Path(document.file_name).suffix or ".jpg"
    path = f"photos/{user_id}_{document.file_unique_id}{ext}"
    os.makedirs("photos", exist_ok=True)

    file = await context.bot.get_file(document.file_id)
    await file.download_to_drive(path)

    # –∫–ª–∞–¥—ë–º –ø—É—Ç—å –∏ ¬´–ø—Å–µ–≤–¥–æ‚Äë—Ñ–æ—Ç–æ¬ª –≤ update, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ
    context.user_data["__file_path"] = path
    # —á—Ç–æ–±—ã –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≥–¥–µ‚Äë—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç .photo, –Ω–µ —É–ø–∞–ª
             # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫‚Äë–∑–∞–≥–ª—É—à–∫–∞

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    return await photo_handler(update, context)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def photo_sugar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—É—é pending_entry, –µ—Å–ª–∏ –µ—Å—Ç—å
    context.user_data.pop('pending_entry', None)
    if context.user_data.get(WAITING_GPT_FLAG):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ñ–æ—Ç–æ.")
        return ConversationHandler.END

    try:
        sugar = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º–æ–ª—å/–ª.")
        return PHOTO_SUGAR

    carbs      = context.user_data.get("carbs")
    xe         = context.user_data.get("xe")
    photo_path = context.user_data.get("photo_path")
    user_id    = update.effective_user.id

    session = SessionLocal()
    profile = session.get(Profile, user_id)
    if not profile:
        session.close()
        await update.message.reply_text(
            "‚ùó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /profile.",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    if carbs is None and xe is not None:
        carbs = xe * profile.icr
        xe_info = f" (—Ä–∞—Å—á—ë—Ç –ø–æ –•–ï: {xe} –•–ï √ó {profile.icr} –≥/–µ–¥.)"
    else:
        xe_info = ""

    if carbs is None:
        session.close()
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ —Ñ–æ—Ç–æ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 'üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞' –∏–ª–∏ /dose –∏ –≤–≤–µ–¥–∏—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã –≤—Ä—É—á–Ω—É—é:",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    dose = calc_bolus(carbs, sugar, PatientProfile(profile.icr, profile.cf, profile.target_bg))
    event_time = getattr(update.message, "date", None) or datetime.utcnow()
    session.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ–∫
    context.user_data['pending_entry'] = {
        'telegram_id': user_id,
        'event_time': event_time,
        'photo_path': photo_path,
        'carbs_g': carbs,
        'xe': xe,
        'sugar_before': sugar,
        'dose': dose
    }

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
        ]
    ])
    await update.message.reply_text(
        f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥{xe_info}\n"
        f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–¥\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
        reply_markup=keyboard
    )
    return ConversationHandler.END


async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /history                   ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
    /history YYYY‚ÄëMM‚ÄëDD        ‚Äì –∑–∞–ø–∏—Å–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
    """
    context.user_data.clear()
    user_id = update.effective_user.id

    # ‚îÄ‚îÄ –∞—Ä–≥—É–º–µ–Ω—Ç‚Äë–¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    day = None
    if context.args:
        try:
            day = datetime.fromisoformat(context.args[0]).date()
        except ValueError:
            await update.message.reply_text(
                "‚ùó –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY-MM-DD  (–ø—Ä–∏–º–µ—Ä: /history 2025-05-05)"
            )
            return

    with SessionLocal() as s:
        query = s.query(Entry).filter_by(telegram_id=user_id)
        if day:
            query = query.filter(func.date(Entry.event_time) == day)

        entries = (
            query
            .order_by(Entry.event_time.desc())
            .limit(None if day else 5)
            .all()
        )

    if not entries:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    header = "–ó–∞–ø–∏—Å–∏ –∑–∞ " + str(day) if day else "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏"
    await update.message.reply_text(f"üìñ {header}:")

    # ‚îÄ‚îÄ –≤—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    for e in entries:
        when   = e.event_time.astimezone().strftime("%d.%m %H:%M")
        carbs  = f"{e.carbs_g:.0f}‚ÄØ–≥" if e.carbs_g else f"{e.xe:.1f}‚ÄØ–•–ï" if e.xe else "-"
        dose   = f"{e.dose:.1f}‚ÄØ–µ–¥"   if e.dose else "-"
        sugar  = f"{e.sugar_before:.1f}" if e.sugar_before else "-"

        text = (
            f"üïí {when}\n"
            f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar}‚ÄØ–º–º–æ–ª—å/–ª\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs}\n"
            f"‚Ä¢ –î–æ–∑–∞: {dose}"
        )

        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úèÔ∏è‚ÄØ–ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"edit:{e.id}"),
                InlineKeyboardButton("üóëÔ∏è‚ÄØ–£–¥–∞–ª–∏—Ç—å",   callback_data=f"del:{e.id}")
            ]
        ])
        await update.message.reply_text(text, reply_markup=kb)

async def chat_with_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    session = SessionLocal()
    user_id = update.effective_user.id
    user = session.get(User, user_id)
    session.close()
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    run = send_message(user.thread_id, content=update.message.text)
    await update.message.reply_text("–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT...")
    while run.status in ["queued", "in_progress"]:
        run = client.beta.threads.runs.retrieve(thread_id=user.thread_id, run_id=run.id)
        await asyncio.sleep(2)
    messages = client.beta.threads.messages.list(thread_id=user.thread_id)
    reply = messages.data[0].content[0].text.value
    await update.message.reply_text(reply)

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å üì∑ —Ñ–æ—Ç–æ –µ–¥—ã ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –•–ï –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é –¥–æ–∑—É\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å: ¬´—Å—ä–µ–ª 3 –•–ï, —Å–∞—Ö–∞—Ä 7.5, —É–∫–æ–ª–æ–ª 4 –µ–¥¬ª ‚Äî –∏ —è –¥–æ–±–∞–≤–ª—é –∑–∞–ø–∏—Å—å\n"
        "‚Ä¢ –í–≤–µ—Å—Ç–∏ /dose –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ–∑—É –≤—Ä—É—á–Ω—É—é\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /history –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üôÇ",
        parse_mode="HTML"
    )

def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    sugar_conv = ConversationHandler(
    entry_points=[
        CommandHandler("sugar", sugar_start),
    ],
    states={
        SUGAR_VAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, sugar_val)],
    },
    fallbacks=[CommandHandler("cancel", cancel_handler)],
)

    photo_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.PHOTO,          photo_handler),  # –±—ã–ª–æ
            MessageHandler(filters.Document.IMAGE, doc_handler),    # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
        ],
        states={
            PHOTO_SUGAR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, photo_sugar_handler)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_handler)],
    )



    dose_conv = ConversationHandler(
    entry_points=[
        CommandHandler("dose", dose_start),
        MessageHandler(filters.Regex("^üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞$"), dose_start),
    ],
    states={
        DOSE_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_method_choice)],
        DOSE_XE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_xe_handler)],
        DOSE_SUGAR:  [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_sugar)],
        DOSE_CARBS:  [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_carbs)],
    },
    fallbacks=[CommandHandler("cancel", cancel_handler)],
)

    

    profile_conv = ConversationHandler(
        entry_points=[
            CommandHandler("profile", profile_start),
            MessageHandler(filters.Regex(r"^üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å$"), profile_start)
        ],
        states={
            PROFILE_ICR:    [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_icr)],
            PROFILE_CF:     [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_cf)],
            PROFILE_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_target)],
        },
        fallbacks=[CommandHandler("cancel", profile_cancel)],
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_handler))
    app.add_handler(CommandHandler("reset", reset_handler))
    app.add_handler(CommandHandler("history", history_handler))
    app.add_handler(CommandHandler("profile", profile_command))
    
    app.add_handler(MessageHandler(filters.Regex("^üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$"), profile_view))
    app.add_handler(MessageHandler(filters.Regex(r"^üìä –ò—Å—Ç–æ—Ä–∏—è$"), history_handler))
    app.add_handler(MessageHandler(filters.Regex(r"^‚ùì –ú–æ–π —Å–∞—Ö–∞—Ä$"), sugar_start))
    app.add_handler(sugar_conv)
    app.add_handler(photo_conv)
    app.add_handler(profile_conv)
    app.add_handler(dose_conv)
    # –õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´üì∑ –§–æ—Ç–æ –µ–¥—ã¬ª
    app.add_handler(MessageHandler(filters.Regex(r"^üì∑ –§–æ—Ç–æ –µ–¥—ã$"), photo_request))
    app.add_handler(
    MessageHandler(filters.TEXT & ~filters.COMMAND, freeform_handler)
)
    from telegram.ext import CallbackQueryHandler
    app.add_handler(CallbackQueryHandler(callback_router))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, apply_edit))
    app.add_handler(CommandHandler("help", help_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
