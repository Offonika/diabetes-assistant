# bot.py
import os
import re
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from db import SessionLocal, init_db, User, Profile, Entry
from gpt_client import create_thread, send_message, client
from functions import PatientProfile, calc_bolus
from config import TELEGRAM_TOKEN

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–æ–∑—ã
PROFILE_ICR, PROFILE_CF, PROFILE_TARGET = range(3)
DOSE_SUGAR, DOSE_CARBS = range(2)

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üì∑ –§–æ—Ç–æ –µ–¥—ã"), KeyboardButton("üçΩÔ∏è –£–≥–ª–µ–≤–æ–¥—ã –∏ —Å–∞—Ö–∞—Ä")],
        [KeyboardButton("üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞"), KeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("üîÅ –°–±—Ä–æ—Å")]
    ],
    resize_keyboard=True
)



def extract_nutrition_info(text: str):
    carbs = None
    xe = None
    match_carbs = re.search(r"(\d+[.,]?\d*)\s*(–≥|–≥—Ä–∞–º–º[–∞–æ–≤]?)\s*(—É–≥–ª–µ–≤–æ–¥–æ–≤|carbs)", text, re.IGNORECASE)
    match_xe = re.search(r"(\d+[.,]?\d*)\s*(–•–ï|XE|—Ö–ª–µ–±–Ω—ã—Ö –µ–¥[–∏–µ–∏—Ü])", text, re.IGNORECASE)
    if match_carbs:
        carbs = float(match_carbs.group(1).replace(",", "."))
    if match_xe:
        xe = float(match_xe.group(1).replace(",", "."))
    return carbs, xe

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    user = session.get(User, user_id)
    if not user:
        thread_id = create_thread()
        user = User(telegram_id=user_id, thread_id=thread_id)
        session.add(user)
        session.commit()
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.", reply_markup=menu_keyboard)
    else:
        await update.message.reply_text("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=menu_keyboard)
    session.close()

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)

async def reset_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    session.query(Entry).filter_by(telegram_id=user_id).delete()
    session.query(Profile).filter_by(telegram_id=user_id).delete()
    session.commit()
    session.close()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=menu_keyboard)

# === –ü—Ä–æ—Ñ–∏–ª—å ===
async def profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    profile = session.get(Profile, user_id)
    session.close()
    
    current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.icr} –≥/–µ–¥.)" if profile and profile.icr else ""
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –ò–ö–• (—Å–∫–æ–ª—å–∫–æ –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ 1 –µ–¥. –∏–Ω—Å—É–ª–∏–Ω–∞) {current_value}:"
    )
    return PROFILE_ICR

async def profile_icr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['icr'] = float(update.message.text)
        
        session = SessionLocal()
        profile = session.get(Profile, update.effective_user.id)
        session.close()

        current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.cf} –º–º–æ–ª—å/–ª)" if profile and profile.cf else ""
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–ö–ß) {current_value}:"
        )
        return PROFILE_CF
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_ICR

async def profile_cf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['cf'] = float(update.message.text)

        session = SessionLocal()
        profile = session.get(Profile, update.effective_user.id)
        session.close()

        current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.target_bg} –º–º–æ–ª—å/–ª)" if profile and profile.target_bg else ""
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ {current_value}:"
        )
        return PROFILE_TARGET
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_CF

async def profile_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['target'] = float(update.message.text)
        session = SessionLocal()
        user_id = update.effective_user.id
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)
        prof.icr = context.user_data['icr']
        prof.cf = context.user_data['cf']
        prof.target_bg = context.user_data['target']
        session.commit()
        session.close()
        await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=menu_keyboard)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_TARGET
    
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 3:
        await update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/profile <–ò–ö–•> <–ö–ß> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 2 10 6",
            parse_mode="Markdown"
        )
        return

    try:
        icr = float(args[0])
        cf = float(args[1])
        target = float(args[2])

        # –§–ª–∞–≥–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è
        suspicious = False
        warning_msg = ""

        if icr > 8 or cf < 3:
            suspicious = True
            warning_msg = (
                "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–µ—Å—Ç–∞–º–∏ –ò–ö–• –∏ –ö–ß.\n"
                f"‚Ä¢ –í—ã –≤–≤–µ–ª–∏ –ò–ö–• = {icr} –º–º–æ–ª—å/–ª (–≤—ã—Å–æ–∫–æ–≤–∞—Ç–æ)\n"
                f"‚Ä¢ –ö–ß = {cf} –≥/–µ–¥. (–Ω–∏–∑–∫–æ–≤–∞—Ç–æ)\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                f"/profile {cf} {icr} {target}\n"
            )

        session = SessionLocal()
        user_id = update.effective_user.id
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)

        prof.icr = cf  # –≥/–µ–¥
        prof.cf = icr  # –º–º–æ–ª—å/–ª
        prof.target_bg = target
        session.commit()
        session.close()

        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
            f"‚Ä¢ –ò–ö–•: {icr} –º–º–æ–ª—å/–ª\n"
            f"‚Ä¢ –ö–ß: {cf} –≥/–µ–¥.\n"
            f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª"
            + warning_msg,
            parse_mode="Markdown"
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä:\n/profile 2 10 6",
            parse_mode="Markdown"
        )

async def profile_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    profile = session.get(Profile, user_id)
    session.close()

    if not profile:
        await update.message.reply_text(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/profile <–ò–ö–•> <–ö–ß> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 2 10 6",
            parse_mode="Markdown"
        )
        return

    msg = (
        f"üìÑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –ò–ö–•: {profile.cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –ö–ß: {profile.icr} –≥/–µ–¥.\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {profile.target_bg} –º–º–æ–ª—å/–ª"
    )
    await update.message.reply_text(msg)


async def profile_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

# === –î–æ–∑–∞ ===
async def dose_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å–∞—Ö–∞—Ä (–º–º–æ–ª—å/–ª):")
    return DOSE_SUGAR

async def dose_sugar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['sugar'] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã (–≥):")
        return DOSE_CARBS
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return DOSE_SUGAR

async def dose_carbs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        carbs = float(update.message.text)
        sugar = context.user_data['sugar']
        session = SessionLocal()
        user_id = update.effective_user.id
        profile = session.get(Profile, user_id)
        if not profile:
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile.")
            return ConversationHandler.END
        dose = calc_bolus(carbs, sugar, PatientProfile(profile.icr, profile.cf, profile.target_bg))
        entry = Entry(telegram_id=user_id, sugar_before=sugar, carbs_g=carbs, dose=dose)
        session.add(entry)
        session.commit()
        session.close()
        await update.message.reply_text(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –¥–æ–∑–∞: {dose} –ï–¥", reply_markup=menu_keyboard)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return DOSE_CARBS

async def dose_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    os.makedirs("photos", exist_ok=True)
    path = f"photos/{user_id}_{photo.file_unique_id}.jpg"
    await file.download_to_drive(path)
    session = SessionLocal()
    user = session.get(User, user_id)
    run = send_message(user.thread_id, image_path=path)
    await update.message.reply_text("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")
    while run.status in ["queued", "in_progress"]:
        run = client.beta.threads.runs.retrieve(thread_id=user.thread_id, run_id=run.id)
        await asyncio.sleep(2)
    messages = client.beta.threads.messages.list(thread_id=user.thread_id)
    response_text = messages.data[0].content[0].text.value
    carbs, xe = extract_nutrition_info(response_text)
    entry = Entry(telegram_id=user_id, photo_path=path, gpt_summary=response_text, carbs_g=carbs, xe=xe)
    session.add(entry)
    session.commit()
    session.close()
    result = f"–û—Ç–≤–µ—Ç GPT: {response_text}"
    if carbs or xe:
        result += f"\n\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {carbs or '-'} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤, {xe or '-'} –•–ï"
    await update.message.reply_text(result)

async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    entries = session.query(Entry).filter_by(telegram_id=user_id).order_by(Entry.timestamp.desc()).limit(5).all()
    session.close()
    if not entries:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
    for e in entries:
        text += f"\n{e.timestamp.strftime('%d.%m %H:%M')} ‚Äî –°–∞—Ö–∞—Ä: {e.sugar_before or '-'} –º–º–æ–ª—å/–ª, –£–≥–ª–µ–≤–æ–¥—ã: {e.carbs_g or '-'} –≥, –î–æ–∑–∞: {e.dose or '-'} –ï–¥"
    await update.message.reply_text(text)

async def chat_with_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    user = session.get(User, user_id)
    session.close()
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    run = send_message(user.thread_id, content=update.message.text)
    await update.message.reply_text("–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT...")
    while run.status in ["queued", "in_progress"]:
        run = client.beta.threads.runs.retrieve(thread_id=user.thread_id, run_id=run.id)
        await asyncio.sleep(2)
    messages = client.beta.threads.messages.list(thread_id=user.thread_id)
    reply = messages.data[0].content[0].text.value
    await update.message.reply_text(reply)

def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    profile_conv = ConversationHandler(
        entry_points=[CommandHandler("profile", profile_start), MessageHandler(filters.Regex("^üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å$"), profile_start)],
        states={
            PROFILE_ICR: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_icr)],
            PROFILE_CF: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_cf)],
            PROFILE_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_target)],
        },
        fallbacks=[CommandHandler("cancel", profile_cancel)],
    )

    dose_conv = ConversationHandler(
        entry_points=[
            CommandHandler("dose", dose_start),
            MessageHandler(filters.Regex("^üçΩÔ∏è –£–≥–ª–µ–≤–æ–¥—ã –∏ —Å–∞—Ö–∞—Ä$"), dose_start)
        ],

        states={
            DOSE_SUGAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_sugar)],
            DOSE_CARBS: [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_carbs)],
        },
        fallbacks=[CommandHandler("cancel", dose_cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_handler))
    app.add_handler(CommandHandler("reset", reset_handler))
    app.add_handler(CommandHandler("history", history_handler))
    app.add_handler(CommandHandler("profile", profile_command))
    app.add_handler(MessageHandler(filters.Regex("^üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$"), profile_view))

    app.add_handler(profile_conv)
    app.add_handler(dose_conv)
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_gpt))
    app.run_polling()

if __name__ == "__main__":
    main()
