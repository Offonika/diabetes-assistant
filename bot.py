# bot.py
import logging
import os

logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("bot")

from config import OPENAI_PROXY
#os.environ["HTTP_PROXY"] = OPENAI_PROXY
#os.environ["HTTPS_PROXY"] = OPENAI_PROXY

import re
import asyncio
import time
import logging


# –û—á–∏—â–∞–µ–º root‚Äë–ª–æ–≥–≥–µ—Ä –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
for logger_name in ("httpcore", "httpx", "telegram", "telegram.ext"):
    logging.getLogger(logger_name).setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ WARNING –∏ –≤—ã—à–µ



logging.info("=== Bot started ===")
print("–õ–æ–≥–≥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
from datetime import datetime, timezone   # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ timezone

from gpt_command_parser import parse_command
from telegram.ext import MessageHandler, filters, CallbackQueryHandler
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from db import SessionLocal, init_db, User, Profile, Entry
from gpt_client import create_thread, send_message, client
from functions import PatientProfile, calc_bolus
from config import TELEGRAM_TOKEN

from sqlalchemy import DateTime, func
from db import SessionLocal, Entry, Profile, User, init_db
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import func          # —É–∂–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ# ‚ñ∏ bot.py  (–ø–æ–ª–æ–∂–∏—Ç–µ —Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ async‚Äë—Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏)
from pathlib import Path
import matplotlib.pyplot as plt
import io
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import mm
from reportlab.lib.utils import ImageReader
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase.pdfmetrics import stringWidth
import textwrap

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –∂–∏—Ä–Ω–æ–≥–æ –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏—è
pdfmetrics.registerFont(TTFont('DejaVuSans', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf'))
pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', '/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf'))

PROFILE_ICR, PROFILE_CF, PROFILE_TARGET         = range(0, 3)    # 0,1,2
DOSE_METHOD, DOSE_XE, DOSE_SUGAR, DOSE_CARBS    = range(3, 7)    # 3,4,5,6
PHOTO_SUGAR                                     = 7              # –ø–æ—Å–ª–µ DOSE_CARBS
SUGAR_VAL                                       = 8              # –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è /sugar
# (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∑—ã –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏  –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å 9 –∏ 10)

WAITING_GPT_FLAG = "waiting_gpt_response"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞
dose_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üì∑ –§–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏")],
        [KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)")],
        [KeyboardButton("üî¢ –í–≤–µ—Å—Ç–∏ –•–ï")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True
)

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üì∑ –§–æ—Ç–æ –µ–¥—ã")], 
        [KeyboardButton("üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞"), KeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("üìà –û—Ç—á—ë—Ç"), KeyboardButton("üîÅ –°–±—Ä–æ—Å"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def freeform_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—É—é pending_entry, –µ—Å–ª–∏ –µ—Å—Ç—å
    context.user_data.pop('pending_entry', None)
    raw_text = update.message.text.strip()
    user_id  = update.effective_user.id
    logger.info(f"FREEFORM raw='{raw_text}'  user={user_id}")

    # --- report_date_input ---
    if context.user_data.get('awaiting_report_date'):
        try:
            
            date_from = datetime.strptime(update.message.text.strip(), "%Y-%m-%d")
        except Exception:
            await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY-MM-DD")
            return
        await send_report(update, context, date_from, "—É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        context.user_data.pop('awaiting_report_date', None)
        return

    # --- apply_edit ---
    if context.user_data.get('pending_entry') is not None and context.user_data.get('edit_id') is None:
        entry = context.user_data['pending_entry']
        only_sugar = (
            entry.get('carbs_g') is None and entry.get('xe') is None and entry.get('dose') is None and entry.get('photo_path') is None
        )
        text = update.message.text.lower().strip()
        if only_sugar:
            try:
                sugar = float(text.replace(",", "."))
                entry['sugar_before'] = sugar
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–∞—Ö–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º–æ–ª—å/–ª.")
                return
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
                    InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
                ]
            ])
            await update.message.reply_text(
                f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ {sugar} –º–º–æ–ª—å/–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
                reply_markup=keyboard
            )
            return
        parts = dict(re.findall(r"(\w+)\s*=\s*([\d.]+)", text))
        if not parts:
            await update.message.reply_text("–ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            return
        if "xe" in parts:    entry['xe']           = float(parts["xe"])
        if "carbs" in parts: entry['carbs_g']      = float(parts["carbs"])
        if "dose" in parts:  entry['dose']         = float(parts["dose"])
        if "—Å–∞—Ö–∞—Ä" in parts or "sugar" in parts:
            entry['sugar_before'] = float(parts.get("—Å–∞—Ö–∞—Ä") or parts["sugar"])
        carbs = entry.get('carbs_g')
        xe = entry.get('xe')
        sugar = entry.get('sugar_before')
        dose = entry.get('dose')
        xe_info = f", –•–ï: {xe}" if xe is not None else ""
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
            ]
        ])
        await update.message.reply_text(
            f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥{xe_info}\n"
            f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª\n"
            f"‚Ä¢ –í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–¥\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
            reply_markup=keyboard
        )
        return
    if "edit_id" in context.user_data:
        text = update.message.text.lower()
        parts = dict(re.findall(r"(\w+)\s*=\s*([\d.]+)", text))
        if not parts:
            await update.message.reply_text("–ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            return
        with SessionLocal() as s:
            entry = s.get(Entry, context.user_data["edit_id"])
            if not entry:
                await update.message.reply_text("–ó–∞–ø–∏—Å—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
                context.user_data.pop("edit_id")
                return
            if "xe" in parts:    entry.xe           = float(parts["xe"])
            if "carbs" in parts: entry.carbs_g      = float(parts["carbs"])
            if "dose" in parts:  entry.dose         = float(parts["dose"])
            if "—Å–∞—Ö–∞—Ä" in parts or "sugar" in parts:
                entry.sugar_before = float(parts.get("—Å–∞—Ö–∞—Ä") or parts["sugar"])
            entry.updated_at = datetime.utcnow()
            s.commit()
        context.user_data.pop("edit_id")
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        return

    # --- –æ—Å–Ω–æ–≤–Ω–æ–π freeform ---
    parsed = await parse_command(raw_text)
    logger.info(f"FREEFORM parsed={parsed}")

    # –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –Ω–µ —É–≤–∏–¥–µ–ª –ø–æ–Ω—è—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤ GPT‚Äë—á–∞—Ç
    if not parsed or parsed.get("action") != "add_entry":
        await chat_with_gpt(update, context)
        return

    # ...–¥–∞–ª—å—à–µ —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏...
    fields      = parsed["fields"]
    entry_date  = parsed.get("entry_date")   # ISO‚Äë—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ None
    time_str    = parsed.get("time")         # "HH:MM" –∏–ª–∏ None

    # ‚îÄ‚îÄ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º event_time ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if entry_date:
        try:
            event_dt = datetime.fromisoformat(entry_date).replace(tzinfo=timezone.utc)
        except ValueError:
            event_dt = datetime.now(timezone.utc)
    elif time_str:
        try:
            hh, mm = map(int, time_str.split(":"))
            today  = datetime.now().date()
            event_dt = datetime.combine(today, dtime(hh, mm))
        except Exception:
            event_dt = datetime.now()
    else:
        event_dt = datetime.now(timezone.utc)

    context.user_data['pending_entry'] = {
        'telegram_id': user_id,
        'event_time': event_dt,
        'xe': fields.get('xe'),
        'carbs_g': fields.get('carbs_g'),
        'dose': fields.get('dose'),
        'sugar_before': fields.get('sugar_before'),
        'photo_path': None
    }

    xe_val     = fields.get('xe')
    carbs_val  = fields.get('carbs_g')
    dose_val   = fields.get('dose')
    sugar_val  = fields.get('sugar_before')
    date_str   = event_dt.strftime("%d.%m %H:%M")
    xe_part    = f"{xe_val}‚ÄØ–•–ï"               if xe_val   is not None else ""
    carb_part  = f"{carbs_val:.0f}‚ÄØ–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤" if carbs_val is not None else ""
    dose_part  = f"–ò–Ω—Å—É–ª–∏–Ω: {dose_val}‚ÄØ–µ–¥"    if dose_val is not None else ""
    sugar_part = f"–°–∞—Ö–∞—Ä: {sugar_val}‚ÄØ–º–º–æ–ª—å/–ª" if sugar_val is not None else ""
    lines = "  \n- ".join(filter(None, [xe_part or carb_part, dose_part, sugar_part]))

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
        ]
    ])
    reply = f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n\n{date_str}  \n- {lines}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫?"
    await update.message.reply_text(reply, reply_markup=keyboard)
    return ConversationHandler.END


def extract_nutrition_info(text: str):
    """
    –ò—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ:
      ‚Ä¢ ¬´–£–≥–ª–µ–≤–æ–¥—ã: 37 –≥ ¬± 3 –≥¬ª  ‚Üí carbs = 37
      ‚Ä¢ ¬´–•–ï: 3,1 ¬± 0,2¬ª         ‚Üí xe    = 3.1
      ‚Ä¢ –¥–∏–∞–ø–∞–∑–æ–Ω ¬´20‚Äì25 –≥¬ª      ‚Üí carbs = —Å—Ä–µ–¥–Ω–µ–µ
      ‚Ä¢ –¥–∏–∞–ø–∞–∑–æ–Ω ¬´3‚Äì4 –•–ï¬ª       ‚Üí xe    = —Å—Ä–µ–¥–Ω–µ–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (carbs_g, xe)
    """
    carbs = xe = None
    # --- –Ω–æ–≤—ã–π —Å—Ç—Ä–æ–≥–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–æ –∑–Ω–∞–∫–æ–º ¬± ---
    m = re.search(r"—É–≥–ª–µ–≤–æ–¥[^\d]*:\s*([\d.,]+)\s*–≥", text, re.IGNORECASE)
    if m:
        carbs = float(m.group(1).replace(",", "."))

    m = re.search(r"\b—Ö[–µe][^\d]*:\s*([\d.,]+)", text, re.IGNORECASE)
    if m:
        xe = float(m.group(1).replace(",", "."))

    # --- –¥–∏–∞–ø–∞–∑–æ–Ω—ã ¬´20‚Äì25 –≥¬ª / ¬´3‚Äì4 –•–ï¬ª ---
    if carbs is None:
        rng = re.search(r"(\d+[.,]?\d*)\s*[‚Äì-]\s*(\d+[.,]?\d*)\s*–≥", text, re.IGNORECASE)
        if rng:
            carbs = (float(rng.group(1).replace(",", ".")) +
                     float(rng.group(2).replace(",", "."))) / 2

    if xe is None:
        rng = re.search(r"(\d+[.,]?\d*)\s*[‚Äì-]\s*(\d+[.,]?\d*)\s*(?:–•–ï|XE)", text, re.IGNORECASE)
        if rng:
            xe = (float(rng.group(1).replace(",", ".")) +
                  float(rng.group(2).replace(",", "."))) / 2

    return carbs, xe

# ‚ñ∏ bot.py  (–ø–æ–ª–æ–∂–∏—Ç–µ —Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ async‚Äë—Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏)
async def apply_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º pending_entry (–µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î)
    if context.user_data.get('pending_entry') is not None and context.user_data.get('edit_id') is None:
        entry = context.user_data['pending_entry']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Å–∞—Ö–∞—Ä
        only_sugar = (
            entry.get('carbs_g') is None and entry.get('xe') is None and entry.get('dose') is None and entry.get('photo_path') is None
        )
        text = update.message.text.lower().strip()
        if only_sugar:
            # –û–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞
            try:
                sugar = float(text.replace(",", "."))
                entry['sugar_before'] = sugar
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–∞—Ö–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º–æ–ª—å/–ª.")
                return
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
                    InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
                ]
            ])
            await update.message.reply_text(
                f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ {sugar} –º–º–æ–ª—å/–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
                reply_markup=keyboard
            )
            return
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –æ–∂–∏–¥–∞–µ–º –ø–æ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ key=value
        parts = dict(re.findall(r"(\w+)\s*=\s*([\d.]+)", text))
        if not parts:
            await update.message.reply_text("–ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            return
        if "xe" in parts:    entry['xe']           = float(parts["xe"])
        if "carbs" in parts: entry['carbs_g']      = float(parts["carbs"])
        if "dose" in parts:  entry['dose']         = float(parts["dose"])
        if "—Å–∞—Ö–∞—Ä" in parts or "sugar" in parts:
            entry['sugar_before'] = float(parts.get("—Å–∞—Ö–∞—Ä") or parts["sugar"])
        # –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        carbs = entry.get('carbs_g')
        xe = entry.get('xe')
        sugar = entry.get('sugar_before')
        dose = entry.get('dose')
        xe_info = f", –•–ï: {xe}" if xe is not None else ""
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
            ]
        ])
        await update.message.reply_text(
            f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥{xe_info}\n"
            f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª\n"
            f"‚Ä¢ –í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–¥\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
            reply_markup=keyboard
        )
        return
    # --- –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ ---
    if "edit_id" not in context.user_data:    # –Ω–µ—Ç —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return

    text = update.message.text.lower()
    parts = dict(re.findall(r"(\w+)\s*=\s*([\d.]+)", text))
    if not parts:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    with SessionLocal() as s:
        entry = s.get(Entry, context.user_data["edit_id"])
        if not entry:
            await update.message.reply_text("–ó–∞–ø–∏—Å—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
            context.user_data.pop("edit_id")
            return

        # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if "xe" in parts:    entry.xe           = float(parts["xe"])
        if "carbs" in parts: entry.carbs_g      = float(parts["carbs"])
        if "dose" in parts:  entry.dose         = float(parts["dose"])
        if "—Å–∞—Ö–∞—Ä" in parts or "sugar" in parts:
            entry.sugar_before = float(parts.get("—Å–∞—Ö–∞—Ä") or parts["sugar"])
        entry.updated_at = datetime.utcnow()
        s.commit()

    context.user_data.pop("edit_id")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline‚Äë–∫–Ω–æ–ø–∫–∏ –∏–∑ /history –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
    query = update.callback_query
    await query.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π ACK
    data = query.data

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ ---
    if data == "confirm_entry":
        entry_data = context.user_data.pop('pending_entry', None)
        if not entry_data:
            await query.edit_message_text("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        session = SessionLocal()
        entry = Entry(**entry_data)
        session.add(entry)
        session.commit()
        session.close()
        await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!")
        return
    if data == "edit_entry":
        entry_data = context.user_data.get('pending_entry')
        if not entry_data:
            await query.edit_message_text("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (apply_edit)
        context.user_data['edit_id'] = None  # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pending_entry —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
        await query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`—Å–∞—Ö–∞—Ä=<–º–º–æ–ª—å/–ª>  xe=<–•–ï>  carbs=<–≥>  dose=<–µ–¥>`\n"
            "–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –≤—Å–µ –ø–æ–ª—è (—á—Ç–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ ‚Äî —Ç–æ –∏ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è).",
            parse_mode="Markdown"
        )
        # –î–∞–ª–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, –∏ apply_edit –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å pending_entry
        return
    if data == "cancel_entry":
        context.user_data.pop('pending_entry', None)
        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=menu_keyboard)
        return

    # --- –°—Ç–∞—Ä—ã–π –∫–æ–¥: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---
    if ":" in data:
        action, entry_id = data.split(":", 1)
        with SessionLocal() as s:
            entry = s.get(Entry, int(entry_id))
            if not entry:
                await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—É–∂–µ —É–¥–∞–ª–µ–Ω–∞).")
                return
            if action == "del":
                s.delete(entry)
                s.commit()
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
                return
            if action == "edit":
                context.user_data["edit_id"] = entry.id
                txt = (
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "`—Å–∞—Ö–∞—Ä=<–º–º–æ–ª—å/–ª>  xe=<–•–ï>  carbs=<–≥>  dose=<–µ–¥>`\n"
                    "–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –≤—Å–µ –ø–æ–ª—è (—á—Ç–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ ‚Äî —Ç–æ –∏ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è).",
                )
                await query.edit_message_text("\n".join(txt), parse_mode="Markdown")
                return

async def doc_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document or not document.mime_type.startswith("image/"):
        return ConversationHandler.END

    user_id = update.effective_user.id
    ext      = Path(document.file_name).suffix or ".jpg"
    file_path = f"photos/{user_id}_{document.file_unique_id}{ext}"
    os.makedirs("photos", exist_ok=True)
    file = await context.bot.get_file(document.file_id)
    await file.download_to_drive(file_path)

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Ç—å –∏ –≤—ã–∑–æ–≤–µ–º photo_handler
    context.user_data["__file_path"] = file_path
    return await photo_handler(update, context, demo=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    user = session.get(User, user_id)

    if not user:
        thread_id = create_thread()
        user = User(telegram_id=user_id, thread_id=thread_id)
        session.add(user)
        session.commit()

    session.close()

    await update.message.reply_text(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!</b>\n"
        "üìò –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —Ç–≤–æ–π –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–Ω–µ–≤–Ω–∏–∫:\n"
        "‚Ä¢ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏,\n"
        "‚Ä¢ —Å—á–∏—Ç–∞—Ç—å –¥–æ–∑—É üíâ,\n"
        "‚Ä¢ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ üçΩÔ∏è\n\n"
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: <code>–Ø —Å—ä–µ–ª 4 –•–ï, —É–∫–æ–ª–æ–ª 6 –µ–¥</code>\n"
        "üì∑ –ò–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –µ–¥—ã ‚Äî —è –≤—Å—ë —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –ø–æ–¥—Å–∫–∞–∂—É –¥–æ–∑—É!\n"
        "ü§ñ –û—Å—Ç–∞–ª—å–Ω–æ–µ —è –≤–æ–∑—å–º—É –Ω–∞ —Å–µ–±—è.\n\n"
        "üîé –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ù–∞–∂–º–∏ ¬´üìÑ –ß—Ç–æ —É–º–µ—é¬ª –≤ –º–µ–Ω—é Telegram.",
        parse_mode="HTML",
        reply_markup=menu_keyboard
    )

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üìã <b>–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π:</b>\n\n"
        "üì∑ <b>–§–æ—Ç–æ –µ–¥—ã</b> ‚Äî –ø—Ä–∏—à–ª–∏ —Å–Ω–∏–º–æ–∫, —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –•–ï –∏ –ø–æ—Å—á–∏—Ç–∞—é –¥–æ–∑—É\n"
        "üíâ <b>–î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞</b> ‚Äî —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –•–ï/—É–≥–ª–µ–≤–æ–¥–æ–≤ + —Å–∞—Ö–∞—Ä\n"
        "üìä <b>–ò—Å—Ç–æ—Ä–∏—è</b> ‚Äî –ø–æ–∫–∞–∂—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n"
        "üìÑ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ò–ö–•/–ö–ß –∏ —Ü–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä\n"
        "üîÑ <b>–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –µ—Å–ª–∏ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "üîÅ <b>–°–±—Ä–æ—Å</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏\n\n"
        "‚úçÔ∏è –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ: ¬´—è —Å—ä–µ–ª 3 –•–ï¬ª, ¬´–¥–æ–±–∞–≤—å —Å–∞—Ö–∞—Ä 7.5¬ª –∏ —Ç.–¥.",
        parse_mode="HTML",
        reply_markup=menu_keyboard
    )

async def reset_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    session.query(Entry).filter_by(telegram_id=user_id).delete()
    session.query(Profile).filter_by(telegram_id=user_id).delete()
    session.query(User).filter_by(telegram_id=user_id).delete()  # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session.commit()
    session.close()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=menu_keyboard)

# === –ü—Ä–æ—Ñ–∏–ª—å ===
async def profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    user_id = update.effective_user.id
    profile = session.get(Profile, user_id)
    session.close()
    
    current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.icr} –≥/–µ–¥.)" if profile and profile.icr else ""
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –ò–ö–• (—Å–∫–æ–ª—å–∫–æ –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ 1 –µ–¥. –∏–Ω—Å—É–ª–∏–Ω–∞) {current_value}:"
    )
    return PROFILE_ICR

async def profile_icr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['icr'] = float(update.message.text)
        
        session = SessionLocal()
        profile = session.get(Profile, update.effective_user.id)
        session.close()

        current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.cf} –º–º–æ–ª—å/–ª)" if profile and profile.cf else ""
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–ö–ß) {current_value}:"
        )
        return PROFILE_CF
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_ICR

async def profile_cf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['cf'] = float(update.message.text)

        session = SessionLocal()
        profile = session.get(Profile, update.effective_user.id)
        session.close()

        current_value = f"(—Ç–µ–∫—É—â–µ–µ: {profile.target_bg} –º–º–æ–ª—å/–ª)" if profile and profile.target_bg else ""
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ {current_value}:"
        )
        return PROFILE_TARGET
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_CF

async def profile_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['target'] = float(update.message.text)
        session = SessionLocal()
        user_id = update.effective_user.id
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)
        prof.icr = context.user_data['icr']
        prof.cf = context.user_data['cf']
        prof.target_bg = context.user_data['target']
        session.commit()
        session.close()
        await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=menu_keyboard)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROFILE_TARGET
    
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 3:
        await update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/profile <–ò–ö–•> <–ö–ß> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 2 10 6",
            parse_mode="Markdown"
        )
        return

    try:
        icr = float(args[0])
        cf = float(args[1])
        target = float(args[2])

        # –§–ª–∞–≥–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è
        suspicious = False
        warning_msg = ""

        if icr > 8 or cf < 3:
            suspicious = True
            warning_msg = (
                "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–µ—Å—Ç–∞–º–∏ –ò–ö–• –∏ –ö–ß.\n"
                f"‚Ä¢ –í—ã –≤–≤–µ–ª–∏ –ò–ö–• = {icr} –º–º–æ–ª—å/–ª (–≤—ã—Å–æ–∫–æ–≤–∞—Ç–æ)\n"
                f"‚Ä¢ –ö–ß = {cf} –≥/–µ–¥. (–Ω–∏–∑–∫–æ–≤–∞—Ç–æ)\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                f"/profile {cf} {icr} {target}\n"
            )

        session = SessionLocal()
        user_id = update.effective_user.id
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)

        prof.icr = cf  # –≥/–µ–¥
        prof.cf = icr  # –º–º–æ–ª—å/–ª
        prof.target_bg = target
        session.commit()
        session.close()

        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
            f"‚Ä¢ –ò–ö–•: {icr} –º–º–æ–ª—å/–ª\n"
            f"‚Ä¢ –ö–ß: {cf} –≥/–µ–¥.\n"
            f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {target} –º–º–æ–ª—å/–ª"
            + warning_msg,
            parse_mode="Markdown"
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä:\n/profile 2 10 6",
            parse_mode="Markdown"
        )

async def profile_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    session = SessionLocal()
    user_id = update.effective_user.id
    profile = session.get(Profile, user_id)
    session.close()

    if not profile:
        await update.message.reply_text(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/profile <–ò–ö–•> <–ö–ß> <—Ü–µ–ª–µ–≤–æ–π>\n"
            "–ü—Ä–∏–º–µ—Ä: /profile 2 10 6",
            parse_mode="Markdown"
        )
        return

    msg = (
        f"üìÑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –ò–ö–•: {profile.cf} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –ö–ß: {profile.icr} –≥/–µ–¥.\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä: {profile.target_bg} –º–º–æ–ª—å/–ª"
    )
    await update.message.reply_text(msg)


async def profile_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

async def photo_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'üì∑ –§–æ—Ç–æ –µ–¥—ã'"""
    await update.message.reply_text(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –∏ —è –æ—Ü–µ–Ω—é —É–≥–ª–µ–≤–æ–¥—ã –∏ –•–ï.",
        reply_markup=menu_keyboard
    )

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
    return ConversationHandler.END

# === –î–æ–∑–∞ ===
async def dose_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤?\n"
        "‚Ä¢ üì∑ –§–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏\n"
        "‚Ä¢ ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)\n"
        "‚Ä¢ üî¢ –í–≤–µ—Å—Ç–∏ –•–ï",
        reply_markup=dose_keyboard
    )
    return DOSE_METHOD

async def sugar_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å—Ä–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
    if context.args:
        try:
            sugar = float(context.args[0].replace(",", "."))
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            session = SessionLocal()
            entry = Entry(telegram_id=update.effective_user.id, sugar_before=sugar)
            session.add(entry); session.commit(); session.close()
            await update.message.reply_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {sugar} –º–º–æ–ª—å/–ª", reply_markup=menu_keyboard)
            return ConversationHandler.END
        except ValueError:
            await update.message.reply_text("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /sugar <—á–∏—Å–ª–æ>")
            return ConversationHandler.END

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):", reply_markup=menu_keyboard)
    return SUGAR_VAL

async def sugar_val(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—É—é pending_entry, –µ—Å–ª–∏ –µ—Å—Ç—å
    context.user_data.pop('pending_entry', None)
    try:
        sugar = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return SUGAR_VAL

    user_id = update.effective_user.id
    event_time = datetime.now(timezone.utc)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ–∫
    context.user_data['pending_entry'] = {
        'telegram_id': user_id,
        'event_time': event_time,
        'photo_path': None,
        'carbs_g': None,
        'xe': None,
        'sugar_before': sugar,
        'dose': None
    }
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
        ]
    ])
    await update.message.reply_text(
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ {sugar} –º–º–æ–ª—å/–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
        reply_markup=keyboard
    )
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def dose_sugar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—É—é pending_entry, –µ—Å–ª–∏ –µ—Å—Ç—å
    context.user_data.pop('pending_entry', None)
    try:
        sugar = float(update.message.text.replace(",", "."))
        context.user_data["sugar"] = sugar
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return DOSE_SUGAR

    user_id = update.effective_user.id
    session = SessionLocal()
    profile = session.get(Profile, user_id)
    if not profile:
        session.close()
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile.")
        return ConversationHandler.END

    icr, cf, target_bg = profile.icr, profile.cf, profile.target_bg

    last_carbs = context.user_data.get("last_carbs")
    last_photo_time = context.user_data.get("last_photo_time")
    now = time.time()

    if last_carbs is not None and last_photo_time and now - last_photo_time < 600:
        carbs, xe_val = last_carbs, None
    elif context.user_data.get("xe") is not None:
        xe_val = context.user_data["xe"]
        carbs = xe_val * 12          # 1 –•–ï = 12 –≥
    else:
        session.close()
        await update.message.reply_text(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É–≥–ª–µ–≤–æ–¥–æ–≤. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã –≤—Ä—É—á–Ω—É—é.",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    dose = calc_bolus(carbs, sugar, PatientProfile(icr, cf, target_bg))
    event_time = datetime.now(timezone.utc)
    session.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–ª–æ–∫
    context.user_data['pending_entry'] = {
        'telegram_id': user_id,
        'event_time': event_time,
        'photo_path': context.user_data.get('photo_path'),
        'carbs_g': carbs,
        'xe': xe_val,
        'sugar_before': sugar,
        'dose': dose
    }

    xe_info = f", –•–ï: {xe_val}" if xe_val is not None else ""
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
        ]
    ])
    await update.message.reply_text(
        f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥{xe_info}\n"
        f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–¥\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
        reply_markup=keyboard
    )
    # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ pending_entry
    for k in ("last_carbs", "last_photo_time", "xe", "sugar", "photo_path"):
        if k in context.user_data and k != 'pending_entry':
            context.user_data.pop(k, None)
    return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚úèÔ∏è ¬´–í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)¬ª
async def dose_carbs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —É–≥–ª–µ–≤–æ–¥—ã –≤—Ä—É—á–Ω—É—é.
      1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
      2. –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–∞—Ö–∞—Ä (–ø–µ—Ä–µ—Ö–æ–¥ –≤ DOSE_SUGAR).
      3. –î–æ–∑—É —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç dose_sugar –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–∞—Ö–∞—Ä–∞.
    """
    try:
        carbs_input = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≥—Ä–∞–º–º–æ–≤ —É–≥–ª–µ–≤–æ–¥–æ–≤.")
        return DOSE_CARBS

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–≥–ª–µ–≤–æ–¥—ã –∫–∞–∫ ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–µ¬ª –∏ –ø–æ–º–µ—á–∞–µ–º –≤—Ä–µ–º—è (‚â§10 –º–∏–Ω)
    context.user_data["last_carbs"] = carbs_input
    context.user_data["last_photo_time"] = time.time()

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):",
        reply_markup=menu_keyboard
    )
    return DOSE_SUGAR
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


async def dose_method_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üì∑ –§–æ—Ç–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ /dose,
        # –∞ –¥–∞–ª—å—à–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π photo_conv
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –±–ª—é–¥–∞:",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END

    if text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —É–≥–ª–µ–≤–æ–¥—ã (–≥)":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=menu_keyboard
        )
        return DOSE_CARBS

    if text == "üî¢ –í–≤–µ—Å—Ç–∏ –•–ï":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª–µ–±–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (–•–ï):",
            reply_markup=menu_keyboard
        )
        return DOSE_XE

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –∏–∑ –º–µ–Ω—é
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
        reply_markup=dose_keyboard
    )
    return DOSE_METHOD


async def dose_xe_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        xe = float(update.message.text.replace(",", "."))
        context.user_data['xe'] = xe
        # —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å–∏–º —Å–∞—Ö–∞—Ä, –¥–∞–ª—å—à–µ –ø–æ–π–¥—ë—Ç –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π sugar‚Üícarbs‚Üídose
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ (–º–º–æ–ª—å/–ª):", reply_markup=menu_keyboard)
        return DOSE_SUGAR
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –•–ï.")
        return DOSE_XE



async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, demo: bool = False):
    from gpt_client import client, send_message, create_thread
    import time

    message = update.message or update.callback_query.message
    user_id = update.effective_user.id

    if context.user_data.get(WAITING_GPT_FLAG):
        await message.reply_text("‚è≥ –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
        return ConversationHandler.END
    context.user_data[WAITING_GPT_FLAG] = True

    # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ file_path
    file_path = context.user_data.pop("__file_path", None)
    if not file_path:
        try:
            photo = update.message.photo[-1]
        except (AttributeError, IndexError):
            await message.reply_text("‚ùó –§–∞–π–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            context.user_data.pop(WAITING_GPT_FLAG, None)
            return ConversationHandler.END

        os.makedirs("photos", exist_ok=True)
        file_path = f"photos/{user_id}_{photo.file_unique_id}.jpg"
        file = await context.bot.get_file(photo.file_id)
        await file.download_to_drive(file_path)

    logging.info("[PHOTO] Saved to %s", file_path)

    try:
        # 2. –ó–∞–ø—É—Å–∫ Vision run
        thread_id = context.user_data.get("thread_id") or create_thread()
        run = send_message(
            thread_id=thread_id,
            content="–û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ –•–ï –Ω–∞ —Ñ–æ—Ç–æ –±–ª—é–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.",
            image_path=file_path
        )
        await message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ (—ç—Ç–æ –∑–∞–π–º—ë—Ç 5‚Äë10‚ÄØ—Å)‚Ä¶")

        # 3. –ñ–¥–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏—è run
        while run.status not in ("completed", "failed", "cancelled", "expired"):
            time.sleep(2)
            run = client.beta.threads.runs.retrieve(thread_id=run.thread_id, run_id=run.id)

        if run.status != "completed":
            logging.error(f"[VISION][RUN_FAILED] run.status={run.status}")
            await message.reply_text("‚ö†Ô∏è Vision –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ.")
            return ConversationHandler.END

        # 4. –ß–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ thread (–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å)
        messages = client.beta.threads.messages.list(thread_id=run.thread_id)
        for m in messages.data:
            logging.warning(f"[VISION][MSG] m.role={m.role}; content={m.content}")

        # 5. –ò—â–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        vision_text = next((m.content[0].text.value for m in messages.data if m.role == "assistant" and m.content), "")
        logging.warning(f"[VISION][RESPONSE] –û—Ç–≤–µ—Ç Vision –¥–ª—è {file_path}:\n{vision_text}")

        carbs_g, xe = extract_nutrition_info(vision_text)
        if carbs_g is None and xe is None:
            # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢ Vision –∏ —Ñ–∞–π–ª
            logging.warning(
                "[VISION][NO_PARSE] –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: %r –¥–ª—è —Ñ–∞–π–ª–∞: %s", vision_text, file_path
            )
            await message.reply_text(
                "‚ö†Ô∏è –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ —Ñ–æ—Ç–æ.\n\n"
                f"–í–æ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Vision:\n<pre>{vision_text}</pre>\n"
                "–í–≤–µ–¥–∏—Ç–µ /dose –∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.",
                parse_mode="HTML",
                reply_markup=menu_keyboard
            )
            return ConversationHandler.END


        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        context.user_data.update({"carbs": carbs_g, "xe": xe, "photo_path": file_path})
        await message.reply_text(
            f"üçΩÔ∏è –ù–∞ —Ñ–æ—Ç–æ:\n{vision_text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å–∞—Ö–∞—Ä (–º–º–æ–ª—å/–ª) ‚Äî –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –¥–æ–∑—É –∏–Ω—Å—É–ª–∏–Ω–∞.",
            reply_markup=menu_keyboard
        )
        return PHOTO_SUGAR

    except Exception as e:
        logging.exception("[PHOTO] Vision failed: %s", e)
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

    finally:
        context.user_data.pop(WAITING_GPT_FLAG, None)


async def doc_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ ¬´—Ñ–∞–π–ª¬ª (document‚Äëimage).
    –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ –æ–±—â–∏–π photo‚Äëflow.
    """
    document = update.message.document
    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à—ë–ª pdf/zip
    if not document or not document.mime_type.startswith("image/"):
        return ConversationHandler.END

    user_id = update.effective_user.id
    # –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    ext  = Path(document.file_name).suffix or ".jpg"
    path = f"photos/{user_id}_{document.file_unique_id}{ext}"
    os.makedirs("photos", exist_ok=True)

    file = await context.bot.get_file(document.file_id)
    await file.download_to_drive(path)

    # –∫–ª–∞–¥—ë–º –ø—É—Ç—å –∏ ¬´–ø—Å–µ–≤–¥–æ‚Äë—Ñ–æ—Ç–æ¬ª –≤ update, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ
    context.user_data["__file_path"] = path
    # —á—Ç–æ–±—ã –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≥–¥–µ‚Äë—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç .photo, –Ω–µ —É–ø–∞–ª
             # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫‚Äë–∑–∞–≥–ª—É—à–∫–∞

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    return await photo_handler(update, context)

async def photo_sugar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sugar = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PHOTO_SUGAR

    user_id = update.effective_user.id
    carbs = context.user_data.get("carbs")
    xe = context.user_data.get("xe")
    photo_path = context.user_data.get("photo_path")
    session = SessionLocal()
    profile = session.get(Profile, user_id)
    if not profile or carbs is None:
        session.close()
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=menu_keyboard)
        return ConversationHandler.END

    dose = calc_bolus(carbs, sugar, PatientProfile(profile.icr, profile.cf, profile.target_bg))
    event_time = datetime.now(timezone.utc)
    session.close()

    context.user_data['pending_entry'] = {
        'telegram_id': user_id,
        'event_time': event_time,
        'photo_path': photo_path,
        'carbs_g': carbs,
        'xe': xe,
        'sugar_before': sugar,
        'dose': dose
    }

    xe_info = f", –•–ï: {xe}" if xe is not None else ""
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_entry"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_entry"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_entry")
        ]
    ])
    await update.message.reply_text(
        f"üíâ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥{xe_info}\n"
        f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar} –º–º–æ–ª—å/–ª\n"
        f"‚Ä¢ –í–∞—à–∞ –¥–æ–∑–∞: {dose} –ï–¥\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫?",
        reply_markup=keyboard
    )
    # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ pending_entry
    for k in ("carbs", "xe", "photo_path"):
        if k in context.user_data and k != 'pending_entry':
            context.user_data.pop(k, None)
    return ConversationHandler.END

async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /history                   ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
    /history YYYY‚ÄëMM‚ÄëDD        ‚Äì –∑–∞–ø–∏—Å–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
    """
    context.user_data.clear()
    user_id = update.effective_user.id

    # ‚îÄ‚îÄ –∞—Ä–≥—É–º–µ–Ω—Ç‚Äë–¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    day = None
    if context.args:
        try:
            day = datetime.fromisoformat(context.args[0]).date()
        except ValueError:
            await update.message.reply_text(
                "‚ùó –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY-MM-DD  (–ø—Ä–∏–º–µ—Ä: /history 2025-05-05)"
            )
            return

    with SessionLocal() as s:
        query = s.query(Entry).filter_by(telegram_id=user_id)
        if day:
            query = query.filter(func.date(Entry.event_time) == day)

        entries = (
            query
            .order_by(Entry.event_time.desc())
            .limit(None if day else 5)
            .all()
        )

    if not entries:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    header = "–ó–∞–ø–∏—Å–∏ –∑–∞ " + str(day) if day else "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏"
    await update.message.reply_text(f"üìñ {header}:")

    # ‚îÄ‚îÄ –≤—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    for e in entries:
        when   = e.event_time.astimezone().strftime("%d.%m %H:%M")
        carbs  = f"{e.carbs_g:.0f}‚ÄØ–≥" if e.carbs_g else f"{e.xe:.1f}‚ÄØ–•–ï" if e.xe else "-"
        dose   = f"{e.dose:.1f}‚ÄØ–µ–¥"   if e.dose else "-"
        sugar  = f"{e.sugar_before:.1f}" if e.sugar_before else "-"

        text = (
            f"üïí {when}\n"
            f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar}‚ÄØ–º–º–æ–ª—å/–ª\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs}\n"
            f"‚Ä¢ –î–æ–∑–∞: {dose}"
        )

        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úèÔ∏è‚ÄØ–ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"edit:{e.id}"),
                InlineKeyboardButton("üóëÔ∏è‚ÄØ–£–¥–∞–ª–∏—Ç—å",   callback_data=f"del:{e.id}")
            ]
        ])
        await update.message.reply_text(text, reply_markup=kb)

async def chat_with_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ‚Äë—Ç–µ–∫—Å—Ç

    session   = SessionLocal()
    user_id   = update.effective_user.id
    user      = session.get(User, user_id)
    session.close()
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    # 1) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –≤ GPT
    run = send_message(user.thread_id, content=update.message.text)
    await update.message.reply_text("‚è≥ –ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç GPT...")

    # 2) –∂–¥—ë–º, –ø–æ–∫–∞ Assistant –∑–∞–∫–æ–Ω—á–∏—Ç
    while run.status not in ("completed", "failed", "cancelled", "expired"):
        await asyncio.sleep(2)
        run = client.beta.threads.runs.retrieve(
            thread_id=user.thread_id,
            run_id=run.id
        )

    # 3) –µ—Å–ª–∏ –Ω–µ completed ‚Äì —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –∏ –≤—ã—Ö–æ–¥–∏–º
    if run.status != "completed":
        await update.message.reply_text(
            f"‚ö†Ô∏è GPT –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å (status={run.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        logging.error(f"GPT run failed: {run}")
        return

    # 4) –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç Assistant'–∞
    messages = client.beta.threads.messages.list(thread_id=user.thread_id)
    reply_msg = next(
        (m for m in messages.data if m.role == "assistant"), None
    )

    if not reply_msg:
        await update.message.reply_text("‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π.")
        return

    reply_text = reply_msg.content[0].text.value
    await update.message.reply_text(reply_text)

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å üì∑ —Ñ–æ—Ç–æ –µ–¥—ã ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –•–ï –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é –¥–æ–∑—É\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å: ¬´—Å—ä–µ–ª 3 –•–ï, —Å–∞—Ö–∞—Ä 7.5, —É–∫–æ–ª–æ–ª 4 –µ–¥¬ª ‚Äî –∏ —è –¥–æ–±–∞–≤–ª—é –∑–∞–ø–∏—Å—å\n"
        "‚Ä¢ –í–≤–µ—Å—Ç–∏ /dose –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ–∑—É –≤—Ä—É—á–Ω—É—é\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /history –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üôÇ",
        parse_mode="HTML"
    )

async def report_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="report_today"),
         InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="report_week")],
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="report_month"),
         InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É", callback_data="report_custom")]
    ])
    await update.message.reply_text(
        "üìä –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á—ë—Ç?",
        reply_markup=keyboard
    )

async def report_period_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    
    user_id = update.effective_user.id
    now = datetime.now()
    if data == "report_today":
        date_from = now.replace(hour=0, minute=0, second=0, microsecond=0)
        period_label = "—Å–µ–≥–æ–¥–Ω—è"
    elif data == "report_week":
        date_from = now - timedelta(days=7)
        period_label = "–Ω–µ–¥–µ–ª—é"
    elif data == "report_month":
        date_from = now - timedelta(days=30)
        period_label = "–º–µ—Å—è—Ü"
    elif data == "report_custom":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        context.user_data['awaiting_report_date'] = True
        return
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return
    # –ù–æ–≤–æ–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ–∂–∏–¥–∞–Ω–∏–µ
    await query.edit_message_text(f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç –∑–∞ {period_label}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await send_report(update, context, date_from, period_label, query=query)

async def report_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_report_date'):
        try:
            
            date_from = datetime.strptime(update.message.text.strip(), "%Y-%m-%d")
        except Exception:
            await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY-MM-DD")
            return
        await send_report(update, context, date_from, "—É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        context.user_data.pop('awaiting_report_date', None)

def clean_markdown(text):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—É—é Markdown-—Ä–∞–∑–º–µ—Ç–∫—É: **–∂–∏—Ä–Ω—ã–π**, # –∑–∞–≥–æ–ª–æ–≤–∫–∏, * —Å–ø–∏—Å–∫–∏, 1. —Å–ø–∏—Å–∫–∏ –∏ —Ç.–¥.
    """
    text = re.sub(r'\*\*([^*]+)\*\*', r'\1', text)  # **–∂–∏—Ä–Ω—ã–π**
    text = re.sub(r'#+\s*', '', text)                  # ### –ó–∞–≥–æ–ª–æ–≤–∫–∏
    text = re.sub(r'^\s*\d+\.\s*', '', text, flags=re.MULTILINE)  # 1. —Å–ø–∏—Å–∫–∏
    text = re.sub(r'^\s*\*\s*', '', text, flags=re.MULTILINE)      # * —Å–ø–∏—Å–∫–∏
    text = re.sub(r'`([^`]+)`', r'\1', text)           # `–∫–æ–¥`
    return text

def split_text_by_width(text, font_name, font_size, max_width_mm):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∞ –∑–∞ max_width_mm."""
    words = text.split()
    lines = []
    current_line = ""
    for word in words:
        test_line = (current_line + " " + word).strip()
        width = stringWidth(test_line, font_name, font_size) / mm
        if width > max_width_mm and current_line:
            lines.append(current_line)
            current_line = word
        else:
            current_line = test_line
    if current_line:
        lines.append(current_line)
    return lines

def generate_pdf_report(summary_lines, errors, day_lines, gpt_text, buf_graph):
    from io import BytesIO
    pdf_buf = BytesIO()
    c = canvas.Canvas(pdf_buf, pagesize=A4)
    width, height = A4
    y = height - 20*mm
    c.setFont("DejaVuSans-Bold", 16)
    c.drawString(20*mm, y, "–û—Ç—á—ë—Ç –ø–æ –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–æ–º—É –¥–Ω–µ–≤–Ω–∏–∫—É")
    y -= 12*mm
    c.setFont("DejaVuSans", 11)
    for line in summary_lines:
        c.drawString(20*mm, y, line)
        y -= 7*mm
    if errors:
        y -= 5*mm
        c.setFont("DejaVuSans-Bold", 11)
        c.drawString(20*mm, y, "–û—à–∏–±–∫–∏ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        y -= 7*mm
        c.setFont("DejaVuSans", 11)
        for line in errors:
            c.drawString(22*mm, y, line)
            y -= 6*mm
    y -= 5*mm
    c.setFont("DejaVuSans-Bold", 11)
    c.drawString(20*mm, y, "–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º:")
    y -= 7*mm
    c.setFont("DejaVuSans", 11)
    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±: –∏—Å–ø–æ–ª—å–∑—É–µ–º TextObject –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫ –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    text_obj = c.beginText(22*mm, y)
    text_obj.setFont("DejaVuSans", 11)
    for line in clean_markdown(gpt_text).splitlines():
        for subline in split_text_by_width(line, "DejaVuSans", 11, max_width_mm=170):
            if text_obj.getY() < 30*mm:
                c.drawText(text_obj)
                c.showPage()
                y = height - 20*mm
                text_obj = c.beginText(22*mm, y)
                text_obj.setFont("DejaVuSans", 11)
            text_obj.textLine(subline)
    c.drawText(text_obj)
    y = text_obj.getY()  # –æ–±–Ω–æ–≤–ª—è–µ–º y –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    if y < 30*mm:
        c.showPage()
        y = height - 20*mm
    # –í—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫
    if buf_graph:
        y -= 10*mm
        try:
            c.drawImage(ImageReader(buf_graph), 20*mm, y-60*mm, width=170*mm, height=50*mm, preserveAspectRatio=True)
            y -= 60*mm
        except Exception:
            pass
    c.save()
    pdf_buf.seek(0)
    return pdf_buf

async def send_report(update, context, date_from, period_label, query=None):
    user_id = update.effective_user.id

    now = datetime.now()
    with SessionLocal() as s:
        entries = (
            s.query(Entry)
            .filter(Entry.telegram_id == user_id)
            .filter(Entry.event_time >= date_from)
            .order_by(Entry.event_time)
            .all()
        )
    if not entries:
        text = f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ {period_label}."
        if query:
            await query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        return
    # --- –°–≤–æ–¥–∫–∞ ---
    sugars = [e.sugar_before for e in entries if e.sugar_before is not None]
    doses = [e.dose for e in entries if e.dose is not None]
    carbs = [e.carbs_g for e in entries if e.carbs_g is not None]
    avg_sugar = round(sum(sugars) / len(sugars), 1) if sugars else "-"
    avg_dose = round(sum(doses) / len(doses), 1) if doses else "-"
    avg_carbs = round(sum(carbs) / len(carbs), 1) if carbs else "-"
    summary_lines = [
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(entries)}",
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–∞—Ö–∞—Ä: {avg_sugar} –º–º–æ–ª—å/–ª",
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–æ–∑–∞: {avg_dose} –ï–¥",
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥—ã: {avg_carbs} –≥"
    ]
    # --- –û—à–∏–±–∫–∏ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ---
    errors = []
    for e in entries:
        if (e.sugar_before is not None and e.sugar_before < 0) or (e.carbs_g is not None and e.carbs_g < 0) or (e.dose is not None and e.dose < 0):
            errors.append(f"{e.event_time.strftime('%d.%m %H:%M')}: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–ø–∏—Å–∏")
        if e.sugar_before is not None and e.sugar_before >= 14:
            errors.append(f"‚ö†Ô∏è {e.event_time.strftime('%d.%m %H:%M')}: —Å–∞—Ö–∞—Ä {e.sugar_before} –º–º–æ–ª—å/–ª ‚Äî –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π!")
    # --- –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º ---
    from collections import defaultdict
    day_stats = defaultdict(list)
    for e in entries:
        day = e.event_time.strftime('%d.%m')
        day_stats[day].append(e)
    day_lines = []
    for day, day_entries in sorted(day_stats.items()):
        sugars_day = [e.sugar_before for e in day_entries if e.sugar_before is not None]
        doses_day = [e.dose for e in day_entries if e.dose is not None]
        carbs_day = [e.carbs_g for e in day_entries if e.carbs_g is not None]
        min_sugar = min(sugars_day) if sugars_day else "-"
        max_sugar = max(sugars_day) if sugars_day else "-"
        sum_dose = sum(doses_day) if doses_day else "-"
        sum_carbs = sum(carbs_day) if carbs_day else "-"
        day_lines.append(f"{day}: —Å–∞—Ö–∞—Ä {min_sugar}‚Äì{max_sugar}, –¥–æ–∑–∞ {sum_dose}, —É–≥–ª–µ–≤–æ–¥—ã {sum_carbs}")
    # --- –ì—Ä–∞—Ñ–∏–∫ ---
    plt.figure(figsize=(7, 3))
    times = [e.event_time for e in entries if e.sugar_before is not None]
    sugars_plot = [e.sugar_before for e in entries if e.sugar_before is not None]
    plt.plot(times, sugars_plot, marker='o', label='–°–∞—Ö–∞—Ä (–º–º–æ–ª—å/–ª)')
    plt.title(f'–î–∏–Ω–∞–º–∏–∫–∞ —Å–∞—Ö–∞—Ä–∞ –∑–∞ {period_label}')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–°–∞—Ö–∞—Ä, –º–º–æ–ª—å/–ª')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    # --- –§–æ—Ä–º–∏—Ä—É–µ–º summary –¥–ª—è GPT ---
    summary = []
    for e in entries:
        when = e.event_time.strftime('%Y-%m-%d %H:%M')
        summary.append(
            f"{when}: —Å–∞—Ö–∞—Ä={e.sugar_before or '-'} –º–º–æ–ª—å/–ª, —É–≥–ª–µ–≤–æ–¥—ã={e.carbs_g or '-'} –≥, –•–ï={e.xe or '-'}, –¥–æ–∑–∞={e.dose or '-'}"
        )
    summary_text = "\n".join(summary)
    gpt_prompt = (
        f"–í–æ—Ç —Å–≤–æ–¥–∫–∞ –ø–æ –¥–Ω–µ–≤–Ω–∏–∫—É –¥–∏–∞–±–µ—Ç–∏–∫–∞ –∑–∞ {period_label}:\n"
        + "\n".join(summary_lines) + "\n"
        + ("\n–û—à–∏–±–∫–∏ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n" + "\n".join(errors) if errors else "")
        + "\n–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º:\n" + "\n".join(day_lines) + "\n"
        + "\n–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n" + summary_text + "\n\n"
        "–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑, –¥–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é —Å–∞—Ö–∞—Ä–∞ –∏ –ø–∏—Ç–∞–Ω–∏—é, —É–∫–∞–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."
    )
    from gpt_client import client
    gpt_response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "system", "content": "–¢—ã ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤."},
                  {"role": "user", "content": gpt_prompt}],
        temperature=0.2,
        max_tokens=600
    )
    gpt_text = gpt_response.choices[0].message.content.strip()
    report_msg = (
        f"<b>üìà –û—Ç—á—ë—Ç –∑–∞ {period_label}</b>\n\n"
        + "\n".join(summary_lines) + "\n\n"
        + ("<b>–û—à–∏–±–∫–∏ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n" + "\n".join(errors) + "\n\n" if errors else "")
        + "<b>–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º:</b>\n" + "\n".join(day_lines) + "\n\n"
        + f"<b>–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{gpt_text}\n\n"
        "‚ÑπÔ∏è –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –æ—Ç—á—ë—Ç –≤—Ä–∞—á—É."
    )
    if query:
        await query.edit_message_text(report_msg, parse_mode="HTML")
        await query.message.reply_photo(buf, caption="–ì—Ä–∞—Ñ–∏–∫ —Å–∞—Ö–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥")
        pdf_buf = generate_pdf_report(summary_lines, errors, day_lines, gpt_text, buf)
        await query.message.reply_document(pdf_buf, filename='diabetes_report.pdf', caption='PDF-–æ—Ç—á—ë—Ç –¥–ª—è –≤—Ä–∞—á–∞')
    else:
        await update.message.reply_text(report_msg, parse_mode="HTML")
        await update.message.reply_photo(buf, caption="–ì—Ä–∞—Ñ–∏–∫ —Å–∞—Ö–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥")
        pdf_buf = generate_pdf_report(summary_lines, errors, day_lines, gpt_text, buf)
        await update.message.reply_document(pdf_buf, filename='diabetes_report.pdf', caption='PDF-–æ—Ç—á—ë—Ç –¥–ª—è –≤—Ä–∞—á–∞')

# 1. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
ONB_HELLO, ONB_PROFILE_ICR, ONB_PROFILE_CF, ONB_PROFILE_TARGET, ONB_DEMO = range(20, 25)

# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
async def onb_hello(update, context):
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="onb:start")]])
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø *Diabet Buddy* ‚Äî —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É–≥–ª–µ–≤–æ–¥–∞–º –∏ –∏–Ω—Å—É–ª–∏–Ω—É.\n"
        "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç <1 –º–∏–Ω.",
        reply_markup=kb, parse_mode="Markdown")
    return ONB_HELLO

async def onb_begin(update, context):
    await update.callback_query.answer()
    await update.callback_query.message.edit_text(
        "üìã *–®–∞–≥ 1 –∏–∑ 2*  \n"
        "–í–≤–µ–¥–∏ *–ò–ö–•* ‚Äî —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–æ–≤ —É–≥–ª–µ–≤–æ–¥–æ–≤ ¬´–ø–æ–∫—Ä—ã–≤–∞–µ—Ç¬ª 1 –µ–¥. –∏–Ω—Å—É–ª–∏–Ω–∞.\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: 12_", parse_mode="Markdown")
    return ONB_PROFILE_ICR

async def onb_icr(update, context):
    try:
        context.user_data['icr'] = float(update.message.text)
        await update.message.reply_text(
            "üìã *–®–∞–≥ 1 –∏–∑ 2*\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ *–ö–ß* ‚Äî –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–º–æ–ª—å/–ª 1 –µ–¥. –∏–Ω—Å—É–ª–∏–Ω–∞ —Å–Ω–∏–∂–∞–µ—Ç —Å–∞—Ö–∞—Ä.\n_–ù–∞–ø—Ä–∏–º–µ—Ä: 2_",
            parse_mode="Markdown")
        return ONB_PROFILE_CF
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ONB_PROFILE_ICR

async def onb_cf(update, context):
    try:
        context.user_data['cf'] = float(update.message.text)
        await update.message.reply_text(
            "üìã *–®–∞–≥ 1 –∏–∑ 2*\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ *—Ü–µ–ª–µ–≤–æ–π —Å–∞—Ö–∞—Ä* (–º–º–æ–ª—å/–ª).\n_–ù–∞–ø—Ä–∏–º–µ—Ä: 6_",
            parse_mode="Markdown")
        return ONB_PROFILE_TARGET
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ONB_PROFILE_CF

async def onb_target(update, context):
    try:
        context.user_data['target'] = float(update.message.text)
        session = SessionLocal()
        user_id = update.effective_user.id
        prof = session.get(Profile, user_id)
        if not prof:
            prof = Profile(telegram_id=user_id)
            session.add(prof)
        prof.icr = context.user_data['icr']
        prof.cf = context.user_data['cf']
        prof.target_bg = context.user_data['target']
        session.commit()
        session.close()
        img_path = "assets/demo.jpg"
        with open(img_path, "rb") as f:
            await update.message.reply_photo(
                f, caption="üì∏ *–®–∞–≥ 2 –∏–∑ 2*\n–ù–∞–∂–º–∏ ¬´–û—Ü–µ–Ω–∏—Ç—å¬ª, –∏ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîç –û—Ü–µ–Ω–∏—Ç—å", callback_data="onb:demo")]]
                )
            )
        return ONB_DEMO
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ONB_PROFILE_TARGET

async def onb_demo_run(update, context):
    await update.callback_query.answer()
    context.user_data["__file_path"] = "assets/demo.jpg"
    context.user_data["demo"] = True
    await photo_handler(update, context, demo=True)
    await update.callback_query.message.reply_text(
        '‚ú® *–ß—Ç–æ —è —É–º–µ—é*\n'
        '‚Ä¢ üì∑  –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –µ–¥—É —Å —Ñ–æ—Ç–æ\n'
        '‚Ä¢ ‚úçÔ∏è  –ü–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ( "5 –•–ï, —Å–∞—Ö–∞—Ä 9" )\n'
        '‚Ä¢ üíâ  –°—á–∏—Ç–∞—Ç—å –¥–æ–∑—É –ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é\n'
        '‚Ä¢ üìä  –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n'
        '‚Ä¢ ‚è∞  –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–º–µ—Ä–µ —Å–∞—Ö–∞—Ä–∞',
        parse_mode="Markdown",
        reply_markup=menu_keyboard
    )
    return ConversationHandler.END

# 4. ConversationHandler –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
onboarding_conv = ConversationHandler(
    entry_points=[CommandHandler("start", onb_hello)],
    states={
        ONB_HELLO: [CallbackQueryHandler(onb_begin, pattern="^onb:start$")],
        ONB_PROFILE_ICR: [MessageHandler(filters.TEXT & ~filters.COMMAND, onb_icr)],
        ONB_PROFILE_CF: [MessageHandler(filters.TEXT & ~filters.COMMAND, onb_cf)],
        ONB_PROFILE_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, onb_target)],
        ONB_DEMO: [CallbackQueryHandler(onb_demo_run, pattern="^onb:demo$")],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_handler),
        MessageHandler(filters.TEXT & ~filters.COMMAND, freeform_handler)
    ],
)

sugar_conv = ConversationHandler(
    entry_points=[
        CommandHandler("sugar", sugar_start),
    ],
    states={
        SUGAR_VAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, sugar_val)],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_handler),
        MessageHandler(filters.TEXT & ~filters.COMMAND, freeform_handler)
    ],
)

photo_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.PHOTO,          photo_handler),
        MessageHandler(filters.Document.IMAGE, doc_handler),
    ],
    states={
        PHOTO_SUGAR: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, photo_sugar_handler)
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_handler),
        MessageHandler(filters.TEXT & ~filters.COMMAND, freeform_handler)
    ],
)

dose_conv = ConversationHandler(
    entry_points=[
        CommandHandler("dose", dose_start),
        MessageHandler(filters.Regex("^üíâ –î–æ–∑–∞ –∏–Ω—Å—É–ª–∏–Ω–∞$"), dose_start),
    ],
    states={
        DOSE_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_method_choice)],
        DOSE_XE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_xe_handler)],
        DOSE_SUGAR:  [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_sugar)],
        DOSE_CARBS:  [MessageHandler(filters.TEXT & ~filters.COMMAND, dose_carbs)],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_handler),
        MessageHandler(filters.TEXT & ~filters.COMMAND, freeform_handler)
    ],
)

profile_conv = ConversationHandler(
    entry_points=[
        CommandHandler("profile", profile_start),
        MessageHandler(filters.Regex(r"^üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å$"), profile_start)
    ],
    states={
        PROFILE_ICR:    [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_icr)],
        PROFILE_CF:     [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_cf)],
        PROFILE_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_target)],
    },
    fallbacks=[
        CommandHandler("cancel", profile_cancel),
        MessageHandler(filters.TEXT & ~filters.COMMAND, freeform_handler)
    ],
)



def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(onboarding_conv)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_handler))
    app.add_handler(CommandHandler("reset", reset_handler))
    app.add_handler(CommandHandler("history", history_handler))
    app.add_handler(CommandHandler("profile", profile_command))
    app.add_handler(MessageHandler(filters.Regex("^üìÑ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$"), profile_view))
    app.add_handler(MessageHandler(filters.Regex(r"^üìä –ò—Å—Ç–æ—Ä–∏—è$"), history_handler))
    app.add_handler(MessageHandler(filters.Regex(r"^‚ùì –ú–æ–π —Å–∞—Ö–∞—Ä$"), sugar_start))
    app.add_handler(sugar_conv)
    app.add_handler(photo_conv)
    app.add_handler(profile_conv)
    app.add_handler(dose_conv)
    app.add_handler(MessageHandler(filters.Regex(r"^üì∑ –§–æ—Ç–æ –µ–¥—ã$"), photo_request))
    app.add_handler(CommandHandler("report", report_handler))
    app.add_handler(MessageHandler(filters.Regex("^üìà –û—Ç—á—ë—Ç$"), report_handler))
    app.add_handler(CallbackQueryHandler(callback_router))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, freeform_handler))
    app.add_handler(CommandHandler("help", help_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
